//An_Dates.pkg////////////////////////////////////////////////////////////
//
//  A collection of date functions used in Ancilla projects.
//
//----------------------------------------------------------------------------
//  Modifications:
//  ~~~~~~~~~~~~~
//  15/ 2/2011  Extracted from An_Functions.pkg
//  23/ 2/2011  Added DateGetWeekNo function to return ISO-8601 week no.
//              Added FirstDayOfMonth and LastDayOfMonth functions.
//              Added DateSetDate function
//              Corrected IsValidDateString function.
//  24/ 2/2011  Changed name of DateGetWeekNo to DateGetISOWeek.
//              Created functions DateGetISOWeekDate, DateGetISODayOfWeek and
//              DateGetISOYear.
//
//============================================================================
//
Use WindowsMonthAndDayNames.pkg

Define MonthNames for "January  February March    April    May      June     July     August   SeptemberOctober  November December "
Define DayNames   for "Sunday   Monday   Tuesday  WednesdayThursday Friday   Saturday "

// Function also defined in An_Functions.pkg
#IFNDEF Get_Leftfill
Function LeftFill2 Global String sString Integer iWidth String sFillChar Returns String
    Function_Return (insert(Repeat(sFillChar,0 max (iWidth-Length(Trim(sString)))),Trim(sString),0))
End_Function

Function Ordinal2 Global Integer iNum Returns String
    String sNum
    Move iNum to sNum
    If (Mid(sNum,1,Length(sNum)-1) = 1) Begin
        Function_Return (sNum-"th")
    End
    // 11th, 113th, 2,312th etc
    Else If (Right(sNum,1) = 1) Begin
        Function_Return (sNum-"st")
    End
    Else If (Right(sNum,1) = 2) Begin
        Function_Return (sNum-"nd")
    End
    Else If (Right(sNum,1) = 3) Begin
        Function_Return (sNum-"rd")
    End
    Else Begin
        Function_Return (sNum-"th")
    End
End_Function
#ENDIF

Function IsLeapYear2 Integer iYear Returns Boolean
    Function_Return ((not(Mod(iYear, 4))) and (Mod(iYear, 100)) and (Mod(iYear, 400)))
End_Function

// Check if a date represented as a string is valid.
// Returns true if date is valid; false otherwise.
// Note: It preserves the state of the Err and LastErr global variables.
//       For some odd reason this gives a false positive;
//         Move (IsDateValid(sValue)) to bOK
//       even if the sValue = "" or sValue = "xfsdf"(!)
Function IsValidDateString2 Global String sDate Returns Boolean
    Date dDate
    DateTime dtDate
    Boolean bWasTrappd bErr bOK bIsLeapYear
    Integer iLastErr iYear iMonth iDay iMonthDays
    
    Move Err to bErr
    Move LastErr to iLastErr
    Move False to Err
    Get isTrapped of (trappedErrors(Error_Object_Id)) 16 to bWasTrappd
    Send Ignore_Error to Error_Object_Id 16
    Move (Date(sDate)) to dDate
    Move sDate to dtDate
    If (bWasTrappd) Begin
        Send Trap_Error to Error_Object_Id 16
    End 
    If (Err = False) Begin  
        Move (DateGetYear(dtDate))  to iYear
        Move (DateGetMonth(dtDate)) to iMonth
        Move (DateGetDay(dtDate))   to iDay
        Move (not(iYear > 1753 and iMonth > 0 and iMonth <= 12 and iDay > 0 and iDay <= 31)) to Err
        If (not(Err) and iMonth = 2) Begin 
            Get IsLeapYear2 iYear to bIsLeapYear 
            Move (If(bIsLeapYear, 29, 28)) to iMonthDays
            Move (iDay > iMonthDays) to Err
        End
    End
    Move (Err = False and LastErr <> 16 and String(dDate) <> "") to bOK
    Move bErr to Err
    Move iLastErr to LastErr
    
    Function_Return bOK
End_Function

// Construct a date from integers iYear iMonth and iDay
//
Function DateSetDate2 Global Integer iYear Integer iMonth Integer iDay Returns Date
    Date dDate
    Move "1/1/1" to dDate
    Move (DateSetYear(dDate,iYear))   to dDate
    Move (DateSetMonth(dDate,iMonth)) to dDate
    Move (DateSetDay(dDate,iDay))     to dDate
    Function_Return dDate
End_Function

// Given the number of a day in the week, return its name.
// Day 1 is Sunday.
//
Function GetDayName2 Global Integer iWeekDay Returns String
    String sDayName
    Get DayNameFromInteger iWeekDay False True to sDayName
    Function_Return sDayName
End_Function

// Given a data (or DateTime) return the name of the day of the week.
//
Function DateGetDayName2 Global DateTime dtDate Returns String
    Integer iWeekday
    Get DateGetDayofWeek_WDS dtDate 2 to iWeekday
    //    Move (DateGetDayofWeek(dtDate)) to iWeekday
    Function_Return (GetDayName2(iWeekday))
End_Function

// Given the number of a month, return its name.
//
Function GetMonthName2 Global Integer iMthNo Returns String
    String sMonthName

    Get MonthNameFromInteger iMthNo False True to sMonthName
    Function_Return sMonthName
End_Function

// Given a date (or DateTime) return the name of the month.
//
Function DateGetMonthName2 Global Date dtDate Returns String
    Function_Return (GetMonthName2(DateGetMonth(dtDate)))
End_Function

Function GetMonthNameLong2 Global Integer iMthNo Returns String
    String sMonthName

    Get MonthNameFromInteger iMthNo True True to sMonthName
    Function_Return sMonthName
End_Function

// Given a date (or DateTime) return the name of the month.
//
Function DateGetMonthNameLong2 Global Date dtDate Returns String
    Function_Return (GetMonthNameLong2(DateGetMonth(dtDate)))
End_Function

// Given a  date (or DateTime) return the number of days in the month.
//
Function DateGetDaysInMonth2 Global DateTime dtDate Returns Integer
    Integer iMth iYr iDays
    Move (DateGetMonth(dtDate)) to iMth
    If ("4,6,9" contains iMth or iMth = 11) Begin
        Move 30 to iDays
    End
    Else If (iMth = 2) Begin
        Move (DateGetYear(dtDate))       to iYr
        Move (If(Mod(iYr,4) = 0 and (Mod(iYr,100) <> 0 or Mod(iYr,400) = 0),29,28)) to iDays
    End
    Else Begin
        Move 31 to iDays
    End
    Function_Return iDays
End_Function

// Return the number of the day of the week according to the ISO definition -
// Moday is day 1.
// The built-in function DateGetDayOfWeek returns Sunday as 1.
// "The great advantage of having International Standards is that they make
// it easy for the American people to differ from everybody else."
//
Function DateGetISODayOfWeek2 Global DateTime dtDate Returns Integer
    Integer iDayNo
    Move (DateGetDayOfWeek(dtDate)) to iDayNo
    Function_Return (If(iDayNo = 1,7,iDayNo - 1))
End_Function

// Return the week number (ISO 8601 definition - weeks start on a Monday
// and week 1 of any year is that with the year's first Thursday in it).
//
Function DateGetISOWeek2 Global DateTime dtDate Returns Integer
    Integer  iDayNo iYear
    Date     dDate dNearestThu dJan1

    // Algorithm (from Wikipedia: http://en.wikipedia.org/wiki/Talk:ISO_week_date#Algorithms)
    // Determine the date's Day of Week, D
    // Use that to move to the nearest Thursday (-3..+3 days)
    // Note the year of that Date, Y
    // Obtain January 1 of that year
    // Get the Ordinal Date of that Thursday, DDD (no. of days since 1st Jan)
    // Then Week No is 1 + (DDD-1) div 7
    Move dtDate to dDate
    Move (DateGetISODayOfWeek2(dDate)) to iDayNo
    Move (dDate - iDayNo + 4) to dNearestThu  // go to previous Thursday
    Move (DateGetYear(dNearestThu)) to iYear
    Move "1/1/1" to dJan1
    Move (DateSetYear(dJan1,iYear)) to dJan1
    Function_Return (((dNearestThu - dJan1) / 7) + 1)

End_Function

// Return the Year of the Week (ISO 8601 definition - weeks start on a Monday
// and week 1 of any year is that with the year's first Thursday in it) containing
// the date passed.
//
Function DateGetISOYear2 Global DateTime dtDate Returns Integer
    Integer  iDayNo
    Date     dDate dNearestThu

    // Algorithm (from Wikipedia: http://en.wikipedia.org/wiki/Talk:ISO_week_date#Algorithms)
    // Determine the date's Day of Week, D
    // Use that to move to the nearest Thursday (-3..+3 days)
    // The result the year of that Date, Y
    Move dtDate to dDate
    Move (DateGetISODayOfWeek2(dDate)) to iDayNo
    Move (dDate - iDayNo + 4) to dNearestThu  // go to previous Thursday
    Function_Return (DateGetYear(dNearestThu))

End_Function

// Return a date in the format Year-Week-Day (e.g. "2009-W53-7")
//
Function DateGetISOWeekDate2 Global DateTime dtDate Returns String
    Integer  iWeek
    String   sYear sDays
    Move (DateGetISOYear2(dtDate))               to sYear
    Move (DateGetISOWeek2(dtDate))      to iWeek
    Move (DateGetISODayOfWeek2(dtDate))          to sDays
    Function_Return (sYear - "-W" - LeftFill2(iWeek,2,0) - "-" - sDays)
End_Function

// Given a date (or DateTime) return the date (DateTime) of the last day in the month.
//
Function DateGetLastDayOfMonth2 Global DateTime dtDate Returns DateTime
    Function_Return (DateSetDay(dtDate,DateGetDaysInMonth2(dtDate)))
End_Function

// Given a date (or DateTime) return the date (DateTime) of the first day of the year
//
Function DateGetFirstDayOfYear2 Global DateTime dtDate Returns DateTime
    Move (DateSetDay(dtDate,1))   to dtDate
    Move (DateSetMonth(dtDate,1)) to dtDate
    Function_Return dtDate
End_Function

// Given a date (or DateTime) return the date (DateTime) of the Last day of the year
//
Function DateGetLastDayOfYear2 Global DateTime dtDate Returns DateTime
    Move (DateSetMonth(dtDate,12)) to dtDate
    Move (DateSetDay(dtDate,31))   to dtDate
    Function_Return dtDate
End_Function

// Given a date (or DateTime) advance or retard it by a given number of months.
// If the original date happens to be the last day of the month, and you want the
// returned date to be the last day of the new month (e.g.  - if advancing by one
// month - you would want 28th February to become 31st March rather than 28th March
// or 30th April to become 31st May) pass the optional boolean parameter as a true
// value (the 31st May will always become 30th June etc.).
//
Function DateChangeMonth2 Global DateTime dtDate Integer iMths Boolean bLastDay Returns DateTime
    // If bLastDay is present and True the last day of the new month will be returned.
    // Use this if you want the 28th February to become eg 31st March or 30th April to become 31st May.
    Integer iDay iMth iYr iYrs iLastDay
    Boolean bIsLast
    Move (DateGetDay(dtDate))   to iDay
    Move (DateGetMonth(dtDate)) to iMth
    Move (DateGetYear(dtDate))  to iYr
    If (num_arguments > 2 and bLastDay and iDay = DateGetDaysInMonth2(dtDate)) Begin
        Move True to bIsLast
    End
    Move (iMth + iMths) to iMth
    If (iMth > 12) Begin
        Move (iMth / 12) to iYrs
        Move (Mod(iMth,12)) to iMth
    End
    While (iMth < 1)
        Move (iMth + 12) to iMth
        Decrement iYrs
    Loop
    Move (DateSetDay(dtDate,1))                                    to dtDate
    If (iMth < 12 or iYr =< 2500) Begin
        Move (DateSetMonth(dtDate,iMth)) to dtDate
    End
    Move (DateSetYear(dtDate,0 max (iYr + iYrs) min 2500))         to dtDate
    Move (DateGetDaysInMonth2(dtDate)) to iLastDay
    If (bIsLast) Begin
        Move iLastDay            to iDay
    End
    Else Begin
        Move (iDay min iLastDay) to iDay
    End
    Function_Return (DateSetDay(dtDate,iDay))
End_Function

// Given a date (or DateTime) advance or retard it by a given number of years.
// The last day of the month is treated as for DateChangeMonth.
//
Function DateChangeYear2 Global DateTime dtDate Integer iYrs Boolean bLastDay Returns DateTime
    // If bLastDay is present and True the last day of the new month will be returned.
    // Use this if you want the 28th February 2007 to become eg 29th Feburary 2008.
    Integer iDay iYr iLastDay
    Move (DateGetDay(dtDate))  to iDay
    Move (DateGetYear(dtDate)) to iYr
    Move (DateSetDay(dtDate,1))           to dtDate
    Move (DateSetYear(dtDate,0 max (iYr + iYrs) min 2500)) to dtDate
    Move (DateGetDaysInMonth2(dtDate)) to iLastDay
    If (num_arguments > 2 and bLastDay) Begin
        Move iLastDay            to iDay
    End
    Else Begin
        Move (iDay min iLastDay) to iDay
    End
    Function_Return (DateSetDay(dtDate,iDay))
End_Function

// Format a date according to the mask passed as second parameter:
// (DateFormat(2/6/2009,"dd/mm/yyyy"))          => 02/06/2009 (or 06/02/2009 if DF_DATE_FORMAT is DF_DATE_USA)
// (DateFormat(2/6/2009,"d/m/yy"))              => 2/6/09
// (DateFormat(2/6/2009,"dd-mmm-yyyy"))         => 02-Jun-2009 (or 02-Feb-2009 if DF_DATE_FORMAT is DF_DATE_USA)
// (DateFormat(2/6/2009,"d mmmm yyyy"))         => 2 June 2009
// (DateFormat(2/6/2009,"ddd, dd mmm yyyy"))    => Tues 02 Jun 2009
// (DateFormat(2/6/2009,"dddd, dth mmmm yyyy")) => Tuesday, 2nd June 2009
//
Function DateFormat2 Global Date dDate String sFormat Returns String
    Integer iDateSep
    String  sDateSep

    If (dDate = 0) Begin
        Move "" to sFormat
    End
    Else Begin

        Get_Attribute DF_DATE_SEPARATOR to iDateSep
        Move (Character(iDateSep)) to sDateSep
        Move (Replaces("/",sFormat,sDateSep)) to sFormat

        Move (Replaces("d",sFormat,"\d")) to sFormat  // because if the day name is Wednesday the "d"s will be replaced with the day.
        Move (Replaces("m",sFormat,"\m")) to sFormat  // because if the month name is September the "m" will be replaced with the month.
        Move (Replace("\d\dth",sFormat,LeftFill2(Ordinal2(DateGetDay(dDate)),2,"0"))) to sFormat
        Move (Replace("\dth",sFormat,Ordinal2(DateGetDay(dDate))))                   to sFormat
        Move (Replace("\d\d\d\d",sFormat,DateGetDayName2(dDate)))                    to sFormat
        Move (Replace("\d\d\d",sFormat,Left(DateGetDayName2(dDate),3)))              to sFormat
        Move (Replace("\d\d",sFormat,LeftFill2(DateGetDay(dDate),2,"0")))            to sFormat
        Move (Replace("\d",sFormat,DateGetDay(dDate)))                              to sFormat

        Move (Replace("\m\m\m\m",sFormat,DateGetMonthName2(dDate)))                  to sFormat
        Move (Replace("\m\m\m",sFormat,Left(DateGetMonthName2(dDate),3)))            to sFormat
        Move (Replace("\m\m",sFormat,LeftFill2(DateGetMonth(dDate),2,"0")))          to sFormat
        Move (Replace("\m",sFormat,DateGetMonth(dDate)))                            to sFormat

        Move (Replace("yyyy",sFormat,DateGetYear(dDate)))                           to sFormat
        Move (Replace("yy",sFormat,Right(DateGetYear(dDate),2)))                    to sFormat

    End
    Function_Return sFormat

End_Function

//End of file/////////////////////////////////////////////////////////////////
