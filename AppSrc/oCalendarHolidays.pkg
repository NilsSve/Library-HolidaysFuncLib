// Note: All Holiday Date functions for the cCalendarHolidays class is defined in this object.
//       The reason is the usage of the class "Procedure RegisterInterface"
//       message. It is used for capturing meta-data for each function..
//       And functions are placed here as it is *only* allowed to use these meta tags;
//       { Published } and { Description }, in an object (not class). 
//
//       A 2-character ISO_Short string, according to the list:
//       https://www.iso.org/obp/ui/#search/code/
//       and are used by of these functions.
//
// *** Common Interface For Holiday Date Functions ***
//
//  Params:  - A 4-digit year as an integer variable
//           - A 2-character string ISO_Short
//             Note: sISO_Short is not always passed as a param.
//  Returns: A date.

Use cCalendarHolidays.pkg

Object oCalendarHolidays is a cCalendarHolidays
    Move Self to ghoCalendarHolidays
    
    // *** Collection of cNationalHolidays objects for selected countries ***
    #Include CountryPackages.pkg

    // *** Special function packages ***
    #Include MothersDay.pkg   // Function "MothersDay"  returns the Mother's Day for the passed year and a 2-character ISO_Short code.
    #Include NationalDays.pkg // Function "NationalDay" returns the National Day for the passed year and a 2-character ISO_Short code.

    { Published = True } 
    { Description = """
      1:st Sunday after FeastChristKing. Falls Between november 27 and december 3. Four Sundays before ChristmasDay.
      """ }
    Function Advent1 Integer iYear Returns Date
        Date dReturn
        Get FeastOfChristTheKing iYear to dReturn
        Move (dReturn + 7) to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Falls one week after 1:st Advent" }
    Function Advent2 Integer iYear Returns Date
        Date dReturn
        Get FeastOfChristTheKing iYear to dReturn
        Move (dReturn + 14) to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Falls two weeks after 1:st Advent" }
    Function Advent3 Integer iYear Returns Date
        Date dReturn
        Get FeastOfChristTheKing iYear to dReturn
        Move (dReturn + 21) to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Falls three weeks after 1:st Advent (last Sunday before ChristmasDay, can ultimately fall on Christmas Eve)" }
    Function Advent4 Integer iYear Returns Date
        Date dReturn
        Get FeastOfChristTheKing iYear to dReturn
        Move (dReturn + 28) to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = """
      All Saints Day is a feast celebrated on November 1 in Western Christianity, and on the first Sunday
      after Pentecost in Eastern Christianity in honour of All the saints, known and unknown.
      
      In Sweden it is a moving holiday and is the Saturday that falls Between 31st of October and 6th of November.
      See also the Halloween Function.
      Returns: The Date of All Saints Day, according to the Gregorian calendar.
      """ }
    Function AllSaintsDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "SE") Begin
            // Start with the 31st of October:
            Get DateSetDate iYear 10 31 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber

            // If iDayNumber = Sunday, add 6 days to next Saturday.
            If (iDayNumber = 7) Begin
                Move (6 + dReturn) to dReturn
            End
            // Else if iDayNumber is less then Saturday, add number of days to next Saturday.
            Else If (iDayNumber < 5) Begin
                Move ((6 - iDayNumber) + dReturn) to dReturn
            End
            // Else the iDayNumber was = 6 which is the Saturday.
        End

        // Eastern Christian - Orthodox and Eastern Catholic church. The first Sunday after Pentecost.
        //    Else If ("" contains String(sISO_Short)) Begin // ***TODO: which countries?
        //        Get Pentecost iYear to dReturn
        // If iDayNumber is less then Sunday, add number of days to next Sunday.
        //        Else If (iDayNumber < 7) Begin
        //             Move ((7 - iDayNumber) + dReturn) to dReturn
        //        End
        //    End

        // Western Christian holiday 1st of November.
        Else Begin
            Get DateSetDate iYear 11 1 to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True }
    { Description = "The day before AllSaintsDay." }
    Function AllSaintsDayEve Integer iYear String sISO_Short Returns Date
        Date dReturn
        Get AllSaintsDay iYear sISO_Short to dReturn
        Decrement dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Ascension Day is the Christian celebration of Christ's ascension to heaven.
      It is celebrated 40 days after Easter Sunday on a Thursday.
      
      In some countries (e.g. Austria, Belgium, Croatia, Denmark, Finland, France, Germany, Iceland,
      Indonesia, the Netherlands, Norway, Sweden, Switzerland and Vanuatu) it is a public holiday; Germany
      also holds its Father's Day on the same Date.
      
      The Date of Ascension (always a Thursday), according to the Gregorian calendar (for years
      after 1752) or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function AscensionDay Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn + 39)
    End_Function

    { Published = True } 
    { Description  = """
      Ash Wednesday, in the Western Christian calendar, is the first day of Lent and occurs forty-six days
      (forty days not counting Sundays) before Easter. It is a moveable fast, falling on a different Date
      each year because it is dependent on the Date of Easter. It can occur as early as the 4th of February
      (5th of February on leap years) or as late as the 10th of March.
      """ }
    Function AshWednesday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Move (dReturn -46)  to dReturn
        Function_Return dReturn
    End_Function

    // Function: EasterDay (Easter Sunday)
    //  Params:  A 4-digit year as an integer variable. 
    { Published = True } 
    { Description  = """
      The EasterDay function calculates the Easter Sunday and is a major Function that forms the basis for
      calculating several other movable holidays; PalmSunday, HolyThursday, HolyFriday, HolySaturday,
      EasterMonday, AscensionThursday and Pentecost.
      
      The Date of Easter Day was defined by the Council of Nicaea in AD 325 as the Sunday after the first full moon
      which falls on or after the Spring Equinox. The Equinox is assumed to always fall on 21st March, so the
      calculation reduces to determining the Date of the full moon and the Date of the following Sunday. The algorithm
      used here was introduced around the year 532 by Dionysius Exiguus.
      
      Under the Julian Calendar a simple 19-year cycle is used to track the phases of the Moon. Under the
      Gregorian Calendar (devised by Clavius and Lilius, and introduced by Pope Gregory XIII in October 1582.),
      two correction factors were added to make the cycle more accurate.
      
      Returns: The Easter Sunday date, according to the Gregorian calendar (for years after C_FirstGregorianYear)
      or the Julian calendar (for years before C_FirstGregorianYear) as a Date variable.
      
      Adopted from a C-algorithm by Simon Kershaw.
      """ }
    Function EasterDay Integer iYear Returns Date
        Integer iGolden iSolar iLunar iPfm iDom iTmp iEaster
        Number nTmp
        Date dReturn
        String sMonth
        
        // We refer to the year number as iYear, and use it to calculate the Golden number, iGolden:
        Move (Mod(iYear, 19) + 1) to iGolden

        // * Julian Calendar *
        If (iYear <= C_FirstGregorianYear) Begin
            // Get the "Dominical number", i.e a Sunday:
            Move (iYear + (iYear/4) + 5) to nTmp
            // We needed to split up calculation because the Mod function can not woerk on expressions.
            Move (Mod(nTmp, 7)) to iDom

            // Uncorrect date of the Paschal full moon
            Move (3 - (11 * iGolden) - 7) to nTmp
            Move (Mod(nTmp, 30))          to iPfm // iPfm is short for Pachal Full Moon.
        End

        // * Gregorian Calendar *
        If (iYear > C_FirstGregorianYear) Begin

            // Calculate the date of the Paschal full moon, that is, the full moon which Easter is the Sunday after.
            // This is done in several stages. First we calculate two values called the solar correction, iSolar, and
            // the lunar correction, iLunar.
            Move (((iYear-1600)/100) - ((iYear-1600)/400)) to iSolar
            Move ((((iYear-1400)/100) * 8) / 25)           to iLunar

            // Next we calculate an uncorrected date for the Paschal full moon, iPprim; then we apply a minor correction to get the exact date, p,
            // as the Number of days after 21st March.
            Move (3 - (11 * iGolden) + iSolar - iLunar) to nTmp
            Move (Mod(nTmp, 30))                        to iPfm

            // Now we need to determine the date of the following Sunday. First we calculate the 'Dominical number', iDom:
            Move (iYear + (iYear/4) - (iYear/100) + (iYear/400)) to nTmp
            Move (Mod(nTmp, 7))                                  to iDom // iDom is the Dominical number.
        End

        If (iDom < 0) Begin
            Move (iDom + 7)  to iDom
        End
        If (iPfm < 0) Begin
            Move (iPfm + 30) to iPfm
        End

        // Correct the Paschal Full Moon date, i.e. number of days after the 21st of March:
        If (iPfm = 29 or (iPfm = 28 and iGolden > 11)) Begin
            Move (iPfm - 1) to iPfm
        End

        Move (4 - iPfm - iDom) to nTmp
        Move (Mod(nTmp, 7))    to iTmp
        If (iTmp < 0) Begin
            Move (iTmp + 7)  to iTmp
        End

        // Easter as the number of days after 21st March
        Move (iPfm + iTmp + 1) to iEaster

        If (iEaster < 11) Begin
            Move (iEaster + 21) to iEaster
            Move "03" to sMonth // March
        End
        Else Begin
            Move (iEaster - 10) to iEaster
            Move "04" to sMonth // April
        End

        Get DateSetDate iYear sMonth iEaster to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Palm Sunday is a Christian moveable feast which always falls on the Sunday before Easter Sunday (Easter Day).
      Returns: The Palm Sunday, according to the Gregorian calendar (for years after 1752)
      or the Julian calendar (for years before 1753) as a Date variable.
      
      This is not a national holiday, but put here for consistency.
      """ }
    Function PalmSunday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn - 7)
    End_Function

    { Published = True } 
    { Description  = """
      Maundy Thursday, also known as Holy Thursday, Great and Holy Thursday, and Thursday of Mysteries.
      HoMaundyly Thursday is a holiday in Denmark and Norway.
      
      Returns: The Maundy Thursday, according to the Gregorian calendar (for years after 1752)
      or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function MaundyThursday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn - 3)
    End_Function

    { Published = True } 
    { Description  = """
      Good Friday, also called Holy Friday, Black Friday, or Great Friday.
      In most Christian countries it's a national holiday.
      
      In the US it is not a govermental holiday at federal level; individual states and municipalities may observe the holiday.
      
      Returns: The Good Friday, according to the Gregorian calendar (for years after 1752)
      or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function GoodFriday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn - 2)
    End_Function

    { Published = True } 
    { Description  = """
      Holy Saturday, is the day after Good Friday and day before Easter Day.
      This is not a national holiday, but put here for consistency.
      
      Returns: The Holy Saturday, according to the Gregorian calendar (for years after 1752)
      or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function HolySaturday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn - 1)
    End_Function

    { Published = True } 
    { Description  = """
      Easter Monday is the day after Easter Sunday and is celebrated as a holiday in some largely Christian cultures,
      especially Roman Catholic cultures.
      
      Returns: The Easter Monday, according to the Gregorian calendar (for years after 1752)
      or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function EasterMonday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn + 1)
    End_Function

    { Published = True } 
    { Description  = """
      Whit Sunday or Pentecost is one of the prominent feasts in the Christian liturgical year.
      It is celebrated 7 weeks (49 days) after Easter Sunday - hence its name.;
      Pentecost is a public holiday in many European countries including Austria, Belgium, Cyprus,
      Denmark, Estonia, France, Spain, Germany, Hungary, Luxemburg, The Netherlands, Norway, Poland,
      Romania, and (most parts of) Switzerland.
      
      In Sweden it is no longer (as of 2005) a holiday,
      While Italy is discussing whether to re-establish it.
      
      Returns: The date of Whit Sunday, according to the Gregorian calendar (for years:
      after 1752) or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function WhitSunday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn + 49)
    End_Function

    { Published = True } 
    { Description = "See: WhitSunday (This function is equal to WhitSunday)" }
    Function Pentecost Integer iYear Returns Date
        Date dReturn
        Get WhitSunday iYear to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Whit Monday or Day after Pentecost (Whit Sunday).
      It is a public holiday in many European countries including Austria, Belgium,
      Denmark, France, Germany, Hungary, Luxemburg, The Netherlands, Norway and Switzerland.
      
      Returns: The Date of Whit Monday, according to the Gregorian calendar (for years
      after 1752) or the Julian calendar (for years before 1753) as a Date variable.
      """ }
    Function WhitMonday Integer iYear Returns Date
        Date dReturn
        Get EasterDay iYear to dReturn
        Function_Return (dReturn + 50)
    End_Function

    { Published = True } 
    { Description  = """
      Martin Luther King's Day is the third Monday in January.
      Holiday in the US.
      """ }
    Function MLKDay Integer iYear String sISO_Short Returns Date
        Integer iDayNumber
        Date dReturn
        
        If (sISO_Short = "US") Begin
            // Start with the 1st of January and find the first Monday.
            Get DateSetDate iYear 1 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
    
            // If iDayNumber is greater then Monday, add number of days to next Monday.
            If (DateGetDayOfWeek(dReturn) > 1) Begin
                Move ((8 - iDayNumber) + dReturn) to dReturn
            End
    
            // Add two more weeks to get the third Monday.
            Move (dReturn + 14) to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      President's Day is the third Monday in February.
      Holiday in the US.
      """ }
    Function PresidentsDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "US") Begin
            // Start with the 1st of February and find the first Monday.
            Get DateSetDate iYear 2 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
    
            // If iDayNumber is greater then Monday, add number of days to next Monday.
            If (iDayNumber > 1) Begin
                Move ((8 - iDayNumber) + dReturn) to dReturn
            End
    
            // Add two more weeks to get the third Monday.
            Move (dReturn + 14) to dReturn
        End
        
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      May Day Bank Holiday.
      Brittish holiday on the first Monday in May.
      In the year 2012 this date is moved to June 4 to mark the Queen's
      diamond jubilee and an extra bank holiday added on June 5 (GB).
      """ }
    Function MayBankDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "GB") Begin
            If (iYear <> 2012) Begin
                // Start with the 1st of May and find the first Monday.
                Get DateSetDate iYear 5 1 to dReturn
                Get DateGetISODayOfWeek dReturn to iDayNumber
    
                // If iDayNumber is greater then Monday, add number of days to first Monday.
                If (iDayNumber > 1) Begin
                    Move ((8- iDayNumber) + dReturn) to dReturn
                End
            End
    
            // Special handling 2012 due to Queens jubilee.
            Else If (iYear = 2012) Begin
                Get DateSetDate iYear 6 4 to dReturn
            End
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      In the year 2012 the MayBankDay date is moved to June 4 to mark the Brittish Queen's
      diamond jubilee and an extra bank holiday is added on June 5 (GB).
      """ }
    Function ExtraBankHoliday Integer iYear String sISO_Short Returns Date
        Date dReturn
        String sHelp

        If (sISO_Short = "GB") Begin
            If (iYear = 2012) Begin
                Get DateSetDate iYear 6 5 to dReturn
            End
        End
        
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Late Summer Bank Holiday.
      Brittish holiday on the last Monday in August (GB).
      """ }
    Function LateSummerBankDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "GB") Begin
            // Start with the 1st of August and find the first Monday.
            Get DateSetDate iYear 8 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
    
            // If iDayNumber is greater then Monday, add number of days to first Monday.
            If (iDayNumber > 1) Begin
                Move ((8- iDayNumber) + dReturn) to dReturn
            End
    
            // Add three more weeks to get the forth Monday.
            Move (dReturn + 21) to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Memorial Day is the last Monday in May.
      Holiday in the US.
      """ }
    Function MemorialDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "GB") Begin
            // Start with the 1st of May and find the first Monday.
            Get DateSetDate iYear 5 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
    
            // If iDayNumber is greater then Monday, add number of days to first Monday.
            If (iDayNumber > 1) Begin
                Move ((8 - iDayNumber) + dReturn) to dReturn
            End
    
            // Add three more weeks to get the forth Monday.
            Move (dReturn + 21) to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Father's Day falls mostly on the second Sunday in June, but it differs for many countries.
      In Sweden it falls on the second Sunday of November
      In Denmark it is fixed and always falls on the fifth of June.
      In Austria and New Zealand it falls on the first Sunday of September
      In Germany it is celebrated on Ascension Day (forty days after Easter)
      In Brazil it falls on the second Sunday of August
      In Argentina,United Kingdom, Netherlands and United States it falls on the third Sunday in June.
      
      Else: The most common day is the second Sunday of June.
      It is however, not a holiday.
      """ }
    Function FathersDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        Move (Uppercase(sISO_Short)) to sISO_Short

        If (sISO_Short = "SE") Begin
            Get DateSetDate iYear 11 1 to dReturn
        End

        Else If (sISO_Short = "DK") Begin
            Get DateSetDate iYear 6 5 to dReturn
            Function_Return dReturn
        End

        Else If (sISO_Short = "AT" or sISO_Short = "NZ") Begin
            Get DateSetDate iYear 9 1 to dReturn
            // Adjust for the addition of seven days below.
            Move (dReturn -7) to dReturn
        End

        Else If (sISO_Short = "DE") Begin
            Get AscensionDay iYear to dReturn
            Function_Return dReturn
        End

        Else If (sISO_Short = "BR") Begin
            Get DateSetDate iYear 8 1 to dReturn
        End

        Else Begin
            Get DateSetDate iYear 6 1 to dReturn
        End

        Get DateGetISODayOfWeek dReturn to iDayNumber
        // If iDayNumber < Sunday, add number of days to first Sunday.
        If (iDayNumber < 7) Begin
            Move ((7 - iDayNumber) + dReturn) to dReturn
        End

        // Add another week.
        Move (dReturn + 7) to dReturn // Second Sunday.
        
        If (sISO_Short = "AR" or sISO_Short = "UK" or sISO_Short = "NL" or sISO_Short = "US") Begin
            Move (7 + dReturn) to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      LaborDay always falls on the 1st of May and is also known as the International Workers Day or May Day.
      In most countries it is on the 1st of May.
      In the US it falls on the first Monday of September.
      """ }
    Function LaborDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        Move (Uppercase(sISO_Short)) to sISO_Short

        If (sISO_Short = "US") Begin        // First Monday in September
            Get DateSetDate iYear 9 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
            If (iDayNumber > 1) Begin
                Move (dReturn + (8 - iDayNumber)) to dReturn
            End
        End

        Else If (sISO_Short <> "US") Begin
            Get DateSetDate iYear 5 1 to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Feast of Christ the King the last holy Sunday in the western liturgical calendar. Falls on a Sunday 20-26 November." }
    Function FeastOfChristTheKing Integer iYear Returns Date
        Date dReturn
        Integer iDayNumber

        // Start with the 20th of November:
        Get DateSetDate iYear 11 20 to dReturn
        Get DateGetISODayOfWeek dReturn to iDayNumber

        // If iDayNumber is less then Sunday, add number of days to next Sunday.
        If (iDayNumber < 7) Begin
            Move ((7 - iDayNumber) + dReturn) to dReturn
        End
        // Else the iDayNumber was = 7 which is the Sunday.

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Midsummer day in Sweden is the Saturday that falls between 20-26th of June.
      Holiday in Sweden. In Norway, Denmark, Estonia and Lithuania the Midsummer day always falls on the 24th of June.
      
      In Norway and Denmark it is called Sankt Hans, and there is also a function doing the same thing, named 'SanktHans'.
      """ }
    Function MidsummerDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        Move (Uppercase(sISO_Short)) to sISO_Short

        If (sISO_Short = "SE") Begin
            // Start with the 20th of June:
            Get DateSetDate iYear 6 20 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber

            // If iDayNumber = Sunday, add 6 days to next Saturday.
            If (iDayNumber = 7) Begin
                Move (6 + dReturn) to dReturn
            End
            // Else if iDayNumber is less then Saturday, add number of days to next Saturday.
            Else If (iDayNumber < 5) Begin
                Move ((6 - iDayNumber) + dReturn) to dReturn
            End
            // Else the iDayNumber was = 6 which is the Saturday.
        End

        // This is probably only correct for Norway, Denmark, Estonia and Lithuania only. But are there
        // other countries that uses yet another date?
        Else Begin
            Get DateSetDate iYear 6 24 to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Same as function: MidsummerDay. In Sweden it is the Saturday that falls between 20-26th of June.
      Holiday in Sweden. In Norway, Denmark, Estonia and Lithuania the Midsummer day always falls on the 24th of June.
      
      In Norway and Denmark MidsummerDay is called SanktHans.
      """ }
    Function SanktHans Integer iYear String sISO_Short Returns Date
        Date dReturn
        Get MidsummerDay iYear sISO_Short to dReturn
        Function_Return dReturn
    End_Function
    
    { Published = True } 
    { Description  = """
      Midsummer eve is the Friday that falls between 19-25th of June.
      'Half a Holiday' in Sweden.
      """ }
    Function MidsummerEve Integer iYear String sISO_Short Returns Date
        Date dReturn
        Get MidsummerDay iYear sISO_Short to dReturn
        Function_Return (dReturn -1)
    End_Function

    { Published = True } 
    { Description = """
      Independence Day always falls on the 4th of July - which is always returned by the NationalDay
      Function when the "US" ISO_Short is passed. The difference to this Function is that it takes
      into account if 4th of July falls on a Saturday or Sunday - in case it is adjusted - and returns
      the day off work.
      """ }
    Function IndependenceDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "US") Begin            
            Get DateSetDate iYear 7 4 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
            If (iDayNumber = 6) Begin
                Move (dReturn - 1) to dReturn // If a Saturday, preceding Friday is day off work.
            End
            If (iDayNumber = 7) Begin
                Move (dReturn + 1) to dReturn // If a Sunday, next Monday is day off work.
            End
        End
        
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description  = """
      Columbus Day falls on the second Monday of October.
      Holiday in the US.
      """ }
    Function ColumbusDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "US") Begin            
            // Start with the 1st of October and find the first Monday.
            Get DateSetDate iYear 10 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber
    
            // If iDayNumber is greater then Monday, add number of days to next Monday.
            If (iDayNumber > 1) Begin
                Move ((8 - iDayNumber) + dReturn) to dReturn
            End
    
            // Add two more weeks to get the second Monday.
            Move (dReturn + 7) to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Thanksgiving Day falls on the fourth Thursday of November in the US - and on Columbus day in Canada." }
    Function Thanksgiving Integer iYear String sISO_Short Returns Date
        Date dReturn
        Integer iDayNumber

        If (sISO_Short = "CA") Begin
            Get ColumbusDay to dReturn
        End

        Else Begin
            // Start with the 1st of November and find the first Thursday.
            Get DateSetDate iYear 11 1 to dReturn
            Get DateGetISODayOfWeek dReturn to iDayNumber  // 1=Monday.

            // If iDayNumber is less then Thursday, add number of days to next Thursday.
            If (iDayNumber < 4) Begin
                Move ((7 - iDayNumber) + dReturn) to dReturn
            End
            Else If (iDayNumber > 4) Begin
                Move (dReturn - iDayNumber) to dReturn
            End

            // Add three more weeks to get the fourth Thursday.
            Move (dReturn + 21) to dReturn
        End

        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = """
      Black Friday falls on the day after Thanksgiving Day and traditionally is the beginning
      of the Christmas shopping season. Especially popular in the United States, the event is spreading to
      other nations such as Canada and Australia. Black Friday is not actually a holiday, but many employers give their;
      employees the day off, increasing the Number of potential shoppers.
      Returns: The date of Thanksgiving + one day = 'Black Friday'
      """ }
    Function BlackFriday Integer iYear Returns Date
        Date dReturn
        Get Thanksgiving iYear "US" to dReturn
        Move (dReturn + 1) to dReturn
        Function_Return dReturn
    End_Function

    // *************************** FIXED HOLIDAYS ******************************
    // These are functions for holidays that occur on the same calendar days
    // each year. The other group of holidays are movable, they always occcur on
    // different dates each year.
    //
    //****************************************************************************

    { Published = True } 
    { Description = "Epiphany is twelve days after Christmas Day and always falls on January 6." }
    Function Epiphany Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 1 6 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Epiphany eve is eleven days after Christmas Day and always falls on January 5." }
    Function EpiphanyEve Integer iYear Returns Date
        Date dReturn
        Get Epiphany iYear to dReturn
        Move (dReturn - 1) to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "GroundHogDay always falls on February 2." }
    Function GroundHogDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 2 2 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "ValentinesDay always falls on February 14." }
    Function ValentinesDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 2 14 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "SaintPatricksDay always falls on March 17." }
    Function SaintPatricksDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 3 17 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "AprilFoolsDay always falls on April 1." }
    Function AprilFoolsDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 4 1 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "FlagDay always falls on the June 14. Commemorates the adoption of the flag of the United States, in 1777." }
    Function FlagDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        If (sISO_Short = "US") Begin
            Get DateSetDate iYear 6 14 to dReturn            
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "PatriotsDay falls on the September 11. (US)" }
    Function PatriotsDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        If (sISO_Short = "US") Begin            
            Get DateSetDate iYear 9 11 to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "ConstitutionDay falls on September 17. (US)" }
    Function ConstitutionDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        If (sISO_Short = "US") Begin            
            Get DateSetDate iYear 9 17 to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "LeifEriksonDay falls on October 9. (US)" }
    Function LeifEriksonDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        If (sISO_Short = "US") Begin            
            Get DateSetDate iYear 10 9 to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "ValborgsEve is the last day of April. Big festive day in Sweden" }
    Function ValborgsEve Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 4 30 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = """
      Halloween is not to be confused with All Saints Day. Halloween always falls on October 31.
      Halloween is originally the Celtic New Years Eve, and
      All Saints Day is a Christian holiday in honour of all Saints.
      Public Holiday in the USA (not national holiday).
      Returns: The date of All Saints Day, according to the Gregorian calendar.
      """ }
    Function Halloween Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 10 31 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Public Holiday in the USA (not national holiday). (US)" }
    Function VeteransDay Integer iYear String sISO_Short Returns Date
        Date dReturn
        If (sISO_Short = "US") Begin
            Get DateSetDate iYear 11 11 to dReturn            
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Start of EU (European) Summer Time - last Sunday in March (at 1am)" }
    Function EUSummerTimeStart Integer iYear Returns Date
        Date dDate
        Integer iDayOfWeek

        // Start with the 31st of March and find the previous Sunday.
        Move "1/1/1" to dDate
        Move (DateSetDay(dDate,31))     to dDate
        Move (DateSetMonth(dDate,3))    to dDate
        Move (DateSetYear(dDate,iYear)) to dDate
        Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
        If (iDayOfWeek > 1) Begin
            Subtract (iDayOfWeek - 1) from dDate
        End
        Function_Return dDate
    End_Function

    { Published = True } 
    { Description = "End of EU (European) Summer Time - last Sunday in October (at 1am)" }
    Function EUSummerTimeEnd Integer iYear Returns Date
        Integer iDayOfWeek
        Date    dDate

        // Start with the 31st of October and find the previous Sunday.
        Move "1/1/1" to dDate
        Move (DateSetDay(dDate,31))     to dDate
        Move (DateSetMonth(dDate,10))   to dDate
        Move (DateSetYear(dDate,iYear)) to dDate
        Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
        If (iDayOfWeek > 1) Begin
            Subtract (iDayOfWeek - 1) from dDate
        End

        Function_Return dDate
    End_Function

    { Published = True } 
    { Description = "ChristmasEve - Always falls on 24th of December." }
    Function ChristmasEve Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 12 24 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "ChristmasDay - Always falls on 25th of December." }
    Function ChristmasDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 12 25 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "SecondDayChristmas - Always falls on 26th of December." }
    Function SecondDayChristmas Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 12 26 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "NewYearsEve - Always falls on December 31." }
    Function NewYearsEve Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 12 31 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "NewYearsDay - Always falls on January 1." }
    Function NewYearsDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 1 1 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Always falls on January 2. Scottish holiday (GB)" }
    Function NewYearHoliday Integer iYear String sISO_Short Returns Date
        Date dReturn
        If (sISO_Short = "GB") Begin
            Get DateSetDate iYear 1 2 to dReturn            
        End
        Function_Return dReturn
    End_Function

    { Published = False }
    { Description = "Chinese Lunar. Returns a tLunar struct (Integer iYear, Integer iMonth, Integer iDay, Boolean bLeap)" }
    Function ChineseLunar Date dDate Returns tLunar
        Integer iOffset iLoop iTemp iLeapMonth
        tLunar Lunar
        Date dSetDate
        
        Get DateSetDate 1900 1 31 to dSetDate
        Move (dDate - dSetDate - 1) to iOffset

        For iLoop from 1900 to 2050
            If (iOffset>0) Begin
                Get HexYearDays iLoop to iTemp
                Subtract iTemp from iOffset
            End
            Else Begin
                Move iLoop to Lunar.iYear
                Move 2050 to iLoop
            End
        Loop
        If (iOffset<0) Begin
            Add iTemp to iOffset
            Subtract 1 from Lunar.iYear
        End
        Get HexLeapMonth Lunar.iYear to iLeapMonth
        Move False to Lunar.bLeap

        For iLoop from 1 to 13
            If (iOffset>0) Begin
                If (iLeapMonth>0 and iLoop=(iLeapMonth+1) and Lunar.bLeap=False) Begin
                    Subtract 1 from iLoop
                    Move True to Lunar.bLeap
                    Get HexLeapDays Lunar.iYear to iTemp
                End
                Else Begin
                    Get HexMonthDays Lunar.iYear iLoop to iTemp
                End
                If (Lunar.bLeap=True and iLoop=(iLeapMonth+1)) Begin
                    Move False to Lunar.bLeap
                End
                Subtract iTemp from iOffset
            End
            Else Begin
                Move iLoop to Lunar.iMonth
                Move 13 to iLoop
            End
        Loop
        If (iOffset=0 and iLeapMonth>0 and iLoop=(iLeapMonth+1)) Begin
            If (Lunar.bLeap) Begin
                Move False to Lunar.bLeap
            End
            Else Begin
                Move True to Lunar.bLeap
                Subtract 1 from Lunar.iMonth
            End
        End
        If (iOffset<0) Begin
            Add iTemp to iOffset
            Subtract 1 from Lunar.iMonth
        End
        Move (iOffset+1) to Lunar.iDay
        Function_Return Lunar
    End_Function

    { Published = False } 
    { Description = "Islamic Calendar, Kuwaiti Algorithm" }
    Function IslamicCalendar Date dDate Returns tLunar
        Integer iYear iMonth iDay iAlpha iBeta iJD iDD iJJ iZZ iCyc
        Number  nShift nYear
        tLunar Lunar

        Move (DateGetYear(dDate))  to iYear
        Move (DateGetMonth(dDate)) to iMonth
        Move (DateGetDay(dDate))   to iDay

        If (iMonth<3) Begin
            Subtract 1 from iYear
            Add 12 to iMonth
        End
        Move (Integer(iYear/100.0)) to iAlpha
        Move (2-iAlpha+Integer(iAlpha/4.0)) to iBeta
        If (iYear<1583) Begin
            Move 0 to iBeta
        End
        If (iYear=1582) Begin
            If (iMonth>10) Begin
                Move -10 to iBeta
            End
            If (iMonth=10) Begin
                Move 0 to iBeta
                If (iDay>4) Begin
                    Move -10 to iBeta
                End
            End
        End
        Move (Integer(365.25*(iYear+4716))+Integer(30.6001*(iMonth+1))+iDay+iBeta-1524) to iJD
        Move 0 to iBeta
        If (iJD>2299160) Begin
            Move (Integer((iJD-1867216.25)/36524.25)) to iAlpha
            Move (1+iAlpha-Integer(iAlpha/4.0)) to iBeta
        End
        Move (iJD+iBeta+1524) to iBeta
        Move (Integer(365.25*Integer((iBeta-122.1)/365.25))) to iDD
        Move (iBeta-iDD-Integer(30.6001*Integer((iBeta-iDD)/30.6001))) to iDay
        Move (10631.0/30.0) to nYear
        Move (8.01/60.0) to nShift // results in years 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 & 29 as leap years
        Move (iJD-1948084) to iZZ
        Move (iZZ/10631.0) to iCyc
        Move (iZZ-(10631*iCyc)) to iZZ
        Move (Integer((iZZ-nShift)/nYear)) to iJJ
        Move (30*iCyc+iJJ) to Lunar.iYear
        Move (iZZ-Integer(iJJ*nYear+nShift)) to iZZ
        Move (Integer((iZZ+28.5001)/29.5)) to Lunar.iMonth
        If (Lunar.iMonth=13) Begin
            Move 12 to Lunar.iMonth
        End
        Move (iZZ-Integer(29.5001*Lunar.iMonth-29)) to Lunar.iDay
        Function_Return Lunar
    End_Function
    
    // ToDo: This should be changed to accept a iYear, and return the dDate.
    { Published = True } 
    { Description = "Chinese New Year" }
    Function ChineseNewYear Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        If (DateGetYear(dDate) <2050) Begin
            Get ChineseLunar dDate to Lunar
        End
        If (Lunar.bLeap=False and Lunar.iMonth=1 and (Lunar.iDay=1 or Lunar.iDay=2)) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function VesakDay Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        If (DateGetYear(dDate)<2050) Begin
            Get ChineseLunar dDate to Lunar
        End
        If (Lunar.bLeap=False and Lunar.iMonth=4 and Lunar.iDay=15) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function ProphetMuhammadBirthday Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=3 and Lunar.iDay=12) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function HariRayaPuasa Date dDate String sISO_Short Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=10) Begin
            If (sISO_Short="MY") Begin
                If (Lunar.iDay=1 or Lunar.iDay=2) Begin
                    Move dDate to dReturn
                End
            End
            Else If (sISO_Short = "SG") Begin
                If (Lunar.iDay=1) Begin
                    Move dDate to dReturn
                End
            End
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function HariRayaHaji Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=12 and Lunar.iDay=10) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function HariRayaHaji2ndDay Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=12 and Lunar.iDay=11) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function AwalMuharram Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=1 and Lunar.iDay=1) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function IsrakMikraj Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=7 and Lunar.iDay=28) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function AwalRamadan Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=9 and Lunar.iDay=2) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = False } 
    { Description = "" }
    Function NuzulAlQuran Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=9 and Lunar.iDay=18) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Agong's Birthday is the first Saturday in June" }
    Function AgongBirthDay Integer iYear Returns Date
        Date dReturn
        Integer iDayNumber

        Get DateSetDate iYear 6 1 to dReturn
        Get DateGetISODayOfWeek dReturn to iDayNumber
        // Start with the 1st of June.
        // If iDayNumber = Sunday, add 6 days to next Saturday.
        If (iDayNumber = 7) Begin
            Move (6 + dReturn) to dReturn
        End
        // Else if iDayNumber is less then Saturday, add number of days to next Saturday.
        Else If (iDayNumber < 5) Begin
            Move ((6 - iDayNumber) + dReturn) to dReturn
        End
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Malaysia day always falls on the 16th of September" }
    Function MalaysiaDay Integer iYear Returns Date
        Date dReturn
        Get DateSetDate iYear 9 16 to dReturn
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Sultan of Kedah's Birthday is third Sunday in January" }
    Function SultanKeday Integer iYear Returns Date
        Date dReturn
        Integer iDayNumber

        Get DateSetDate iYear 6 1  to dReturn
        Get DateGetISODayOfWeek dReturn to iDayNumber
        // If iDayNumber < Sunday, add number of days to first Sunday.
        If (iDayNumber < 7) Begin
            Move ((7 - iDayNumber) + dReturn) to dReturn
        End

        // Add 2 weeks.
        Move (dReturn + 14) to dReturn // Third Sunday.
        Function_Return dReturn
    End_Function

    { Published = True } 
    { Description = "Penang Governor's Birthday is the Second Saturday in July" }
    Function PenangGovernorBirthday Integer iYear Returns Date
        Date dReturn
        Integer iDayNumber

        Get DateSetDate iYear 7 1 to dReturn
        Get DateGetISODayOfWeek dReturn to iDayNumber
        // Start with the 1st of June.
        // If iDayNumber = Sunday, add 6 days to next Saturday.
        If (iDayNumber = 7) Begin
            Move (6 + dReturn) to dReturn
        End
        // Else if iDayNumber is less then Saturday, add number of days to next Saturday.
        Else If (iDayNumber < 5) Begin
            Move ((6 - iDayNumber) + dReturn) to dReturn
        End
        // Add 1 weeks.
        Move (dReturn + 7) to dReturn // Second Saturday.
        Function_Return dReturn
    End_Function

    { Published = True }
    { Description = "Malacca Governor's Birthday is the Second Saturday in July" }
    Function MalaccaGovernorBirthday Integer iYear Returns Date
        Date dReturn
        Integer iDayNumber

        Get DateSetDate iYear 10 1 to dReturn
        Get DateGetISODayOfWeek dReturn to iDayNumber
        // Start with the 1st of June.
        // If iDayNumber = Sunday, add 6 days to next Saturday.
        If (iDayNumber = 7) Begin
            Move (6 + dReturn) to dReturn
        End
        // Else if iDayNumber is less then Saturday, add number of days to next Saturday.
        Else If (iDayNumber < 5) Begin
            Move ((6 - iDayNumber) + dReturn) to dReturn
        End
        // Add 1 weeks.
        Move (dReturn + 7) to dReturn // Second Saturday.
        Function_Return dReturn
    End_Function

    { Published = True }
    { Description = "Christmas Day bank holiday - the Monday following Christmas Day if the latter is at a weekend. (GB)" }
    Function ChristmasDayBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate
        
        If (sISO_Short = "GB") Begin            
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,25))     to dDate
            Move (DateSetMonth(dDate,12))   to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            If      (iDayOfWeek = 7) Begin
                Move (dDate + 2) to dDate      // Saturday
            End
            Else If (iDayOfWeek = 1) Begin
                Move (dDate + 1) to dDate      // Sunday
            End
        End

        Function_Return dDate
    End_Function

    { Published = True }
    { Description = """
      Boxing Day bank holiday - the Monday (if Boxing Day is on a Saturday) or Tuesday 
      (if on a Sunday) following. (GB)
      """ }
    Function BoxingDayBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate
        
        If (sISO_Short = "GB") Begin            
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,26))     to dDate
            Move (DateSetMonth(dDate,12))   to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            // If it falls on a Saturday move it to the Monday
            // If it falls on a Sunday or Monday move it to the Tuesday (Monday will be the Christmas Day BH)
            If      (iDayOfWeek = 7 or iDayOfWeek = 1) Begin
                Move (dDate + 2) to dDate   // Saturday or Sunday
            End
            Else If (iDayOfWeek = 2) Begin
                Move (dDate + 1) to dDate   // Monday
            End
        End

        Function_Return dDate
    End_Function

    { Published = True }
    { Description = """
      New Year's Day bank holiday - the Monday following New Year's Day if 
      the latter is at a weekend. (GB)
      """ }
    Function NewYearsDayBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate
        
        If (sISO_Short = "GB") Begin
            Move "1/1/1" to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            If      (iDayOfWeek = 7) Begin
                Move (dDate + 2) to dDate      // Saturday
            End
            Else If (iDayOfWeek = 1) Begin
                Move (dDate + 1) to dDate      // Sunday
            End
        End

        Function_Return dDate
    End_Function

    { Published = True }
    { Description = """
      The Scots get an extra day at New Year on 2nd January.
      But if that is a Saturday or Sunday it will be the following Monday or
      Tuesday (i.e. the day after the New Year's Day bank holiday) (GB).
      """ }
    Function ScotishNewYearHoliday Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date  dDate

        If (sISO_Short = "GB") Begin        
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,2))      to dDate
            Move (DateSetMonth(dDate,1))    to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            // If it falls on a Saturday move it to the Monday
            // If it falls on a Sunday or Monday move it to the Tuesday (Monday will be the New Year's Day BH)
            If      (iDayOfWeek = 7 or iDayOfWeek = 1) Begin
                Move (dDate + 2) to dDate   // Saturday or Sunday
            End
            Else If (iDayOfWeek = 2) Begin
                Move (dDate + 1) to dDate   // Monday
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = """
      St.Patrick' Day bank holiday - the Monday after St.Patrick's Day if the latter
      falls at a weekend (GB)
      """ }
    Function StPatricksDayBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate

        If (sISO_Short = "GB") Begin        
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,17))     to dDate
            Move (DateSetMonth(dDate,3))    to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            If      (iDayOfWeek = 7) Begin
                Move (dDate + 2) to dDate    // Saturday
            End
            Else If (iDayOfWeek = 1) Begin
                Move (dDate + 1) to dDate    // Sunday
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = """
      Early May Bank Holiday.
      The first Monday in May.
      In the year 2012 this date is moved to June 4 to mark the Queen's
      diamond jubilee and an extra bank holiday added on June 5 (GB).
      """ }
    Function EarlyMayBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate

        If (sISO_Short = "GB") Begin        
            If (iYear <> 2012) Begin
                // Start with the 1st of May and find the first Monday.
                Move "1/1/1" to dDate
                Move (DateSetMonth(dDate,5))    to dDate
                Move (DateSetYear(dDate,iYear)) to dDate
                Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
                If (iDayOfWeek = 1) Begin
                    Add 1                to dDate   // Sunday
                End
                If (iDayOfWeek > 2) Begin
                    Add (9 - iDayOfWeek) to dDate
                End
            End
    
            // Special handling for 2012 for Queen's jubilee.
            Else If (iYear = 2012) Begin
                Move "1/1/1" to dDate
                Move (DateSetDay(dDate,4))      to dDate
                Move (DateSetMonth(dDate,6))    to dDate
                Move (DateSetYear(dDate,iYear)) to dDate
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "Summer Bank Holiday (Scotland). The first Monday in August (GB)" }
    Function SummerBHScot Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate

        If (sISO_Short = "GB") Begin        
            // Start with the 1st of August and find the first Monday.
            Move "1/1/1" to dDate
            Move (DateSetMonth(dDate,8))    to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            If (iDayOfWeek = 1) Begin
                Add 1                to dDate
            End
            If (iDayOfWeek > 2) Begin
                Add (9 - iDayOfWeek) to dDate
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "Summer Bank Holiday (England). The last Monday in August. (GB)" }
    Function SummerBHEngNI Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date    dDate

        If (sISO_Short = "GB") Begin        
            // Start with the 31st of August and find the previous Monday.
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,31))     to dDate
            Move (DateSetMonth(dDate,8))    to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            If      (iDayOfWeek = 1) Begin
                Subtract 6 from dDate
            End
            Else If (iDayOfWeek > 2) Begin
                Subtract (iDayOfWeek - 2) from dDate
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "Battle of the Boyne Day (Orangemen's Day) - Northern Ireland, 12th July (GB)" }
    Function BattleOfTheBoyne Integer iYear String sISO_Short Returns Date
        Date dDate
        
        If (sISO_Short = "GB") Begin
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,12))     to dDate
            Move (DateSetMonth(dDate,7))    to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
        End

        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "Battle of the Boyne Day bank holiday - Northern Ireland, 12th July unless that is a Saturday or Sunday (GB)" }
    Function BattleOfTheBoyneBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date dDate

        If (sISO_Short = "GB") Begin
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,12))     to dDate
            Move (DateSetMonth(dDate,7))    to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate)) to iDayOfWeek
            If      (iDayOfWeek = 7) Begin
                Move (dDate + 2) to dDate          // Saturday
            End
            Else If (iDayOfWeek = 1) Begin
                Move (dDate + 1) to dDate          // Sunday
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "Remembrance Sunday - the first Sunday on or after 11th November (GB)." }
    Function RemembranceSunday Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date dDate

        If (sISO_Short = "GB") Begin
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,11))     to dDate
            Move (DateSetMonth(dDate,11))   to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate))  to iDayOfWeek
            If (iDayOfWeek > 1) Begin
                Add (8 - iDayOfWeek) to dDate
            End
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "St.Andrew's Day (Scotland) - 30th November. (GB)" }
    Function StAndrewsDay Integer iYear String sISO_Short Returns Date
        Date dDate

        If (sISO_Short = "GB") Begin
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,30))     to dDate
            Move (DateSetMonth(dDate,11))   to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
        End
        
        Function_Return dDate
    End_Function

    { Published = True }
    { Description = "St.Andrew's Day bank holiday (Scotland) - 30th November unless that is a Saturday or Sunday (GB)" }
    Function StAndrewsDayBH Integer iYear String sISO_Short Returns Date
        Integer iDayOfWeek
        Date dDate

        If (sISO_Short = "GB") Begin
            Move "1/1/1" to dDate
            Move (DateSetDay(dDate,30))     to dDate
            Move (DateSetMonth(dDate,11))   to dDate
            Move (DateSetYear(dDate,iYear)) to dDate
            Move (DateGetDayOfWeek(dDate)) to iDayOfWeek
            If (iDayOfWeek = 7) Begin
                Move (dDate + 2) to dDate          // Saturday
            End
            Else If (iDayOfWeek = 1) Begin
                Move (dDate + 1) to dDate          // Sunday
            End
        End
        
        Function_Return dDate
    End_Function

End_Object
