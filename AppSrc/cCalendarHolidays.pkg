/*/****************************************************************************
   $Module type: Class Package
   $Module name: CalendarHolidays.pkg
   $Author     : Nils Svedmyr, RDC Tools International. nils.svedmyr@rdctools.com
   Created     : 2009-07-27 @ 12:53
  
   Description : To calculate dates for holidays *and* other special days for a given year.
  
   List of holiday Functions: See DateFunctionsTest.vw when NationalHolidays program is run.
  
   $Rev History:
      2009-07-27  Module header created
      2010-12-14  Mother's Day for all countries in separate package. (MothersDay.pkg)
      2010-12-27  Made functions into a class
      2011-02-22  Added class cNationalHolidays (Ola Eldoy)
      2025-01-22  Merged much of the holiday logic that was split over several 
                  packages into one place: cCalendarHolidays and ocClalendarHoliday 
                  object. (Nils Svedmyr)

****************************************************************************
*/
Use Windows.pkg
Use Dll.pkg
Use Dferror.pkg
Use GlobalDateTimeFunctions.pkg
Use cCalendarHolidays.h.pkg

/*   What is the function library for "Holidays and other special dates"?
     
     The library consists of holiday & special day functions for most parts of the Western world.
     There are two types of functions/usages of this library.
     
     1. First there are a series of functions that returns the date for a given holiday
        function, given a certain year.
        
        The library consists of a series of named holiday functions that all returns a date.
        The functions takes two parameters;
            a) An integer iYear
            b) A 2-character string sISO_Short country code 
        Returns: A date    
        Example: "Get EasterDay of ghoCalendarHolidays 2025 "US" to dDate"
        The country code is needed as some holidays falls on different dates in
        different countries.
        
        Not all of the functions needs the country code, but you can pass the
        country code for all functions calls, to have a unified calling interface.
        
        All 2-character sISO_Short codes can be seen near the bottom of this
        package; "Procedure CollectISOCodes", or by getting the 'pISO_Codes'
        struct array property.
        All 2-character ISO_Short string are defined here:
            https://www.iso.org/obp/ui/#search/code/
     
     2. Secondly there is the 'HolidayName' function that returns the name of a 
        holiday/special day, given a certain date.
        It take on three parameters;
            a) A date (could be return value from 1. above)
            b) A 2-character string sISO_Short country code. Same as in 1. above.
            c) A ByRef boolean parameter that will be true if the date is a holiday/bankday.
               Remember that there are also special days like e.g. "Mother's Day" that
               is not a holiday.
        Returns: A holiday name as a string, and sets the ByRef param to True/False.
        Example: "Get HolidayName of ghoCalendarHolidays 03/16/2025 "US" (&bIsHoliday) to sHolidayName"
        The 'HolidayName' function of this class in its turn, calls an 'HolidayName' function for the
        passed ISO_Short value for the correct country packages found in CountryPackages.pkg file.
        The CountryPackages.pkg is included in the oCalendarHolidays function library object.
        
        Note: If your country does not exist in CountryPackages.pkg you are encouraged to
              create one by looking at the existing packages AND email the package
              to support@rdctools.com. 
              
      3. Thirdly there is a 'reciprocal' function to number 1. above. The 'Holiday Function Library' 
         is named: 'IsDateAHoliday'.
         It takes a Date- and an ISO_Short- parameter and returns a boolean True/False if the date is found.
         Or in other words if a matching function was found in the library.
         The function also uses three ByRef parameters: Boolean bIsHoliday, String sHolidayName and String sFunctionName.

     The WindowsLocaleISO_Short function can be used to get the Windows locale ISO_Short 2-character code.
     The global handle ghoCalendarHolidays can be used to access all functions.
              
     The cCalendarHolidays class consist of helper functions for the holiday
     function library: oCalendarHolidays.pkg (object), but can be used for whatever purposes.
     The oCalendarHolidays object also contains code for all country packages found in CountryPackages.pkg.
     
     Note: The reason for the oCalendarHolidays.pkg is the usage of the "Procedure RegisterInterface"
           class message (private). It is used to capture; the function name, calling parameters and the help text (comment).
           It is *only* allowed in DataFlex to use meta tags { Published } and { Description }, in
           an Object (not Class).

   
   * Years when the Gregorian calendar was introduced:
     1582 - Spain, Italy, Polen, Portugal, France, Luxembourg
            and the katholic parts of the Netherlands
     1583 - Bayern och Tyrol
     1583-1585 - The katholic parts of Germany and Schweiz
     1584 - Austria och the Czeck Republic
     1587 - Hungary
     1590 - Transsylvania
     1610 - Preussen
     1700 - Denmark (inclusive Norway, Faroe Islands and Iceland)
            and the protestantic parts of Germany, Netherlands and Schweiz
            (except the Sankt Gallen canton)
     1724 - The Swiss canton Sankt Gallen
     1752 - Britain and colonies (inclusive those that would later constitute the USA)
     1753 - Sweden (inclusive Finland)
     1873 - Japan
     1911 - China
     1912 - Albania
     1915 - Lithuania
     1916 - Bulgaria
     1918 - Ryssia och Estonia
     1919 - Rumania och Serbia
     1924 - Grece
     1926 - Turkey
     1928 - Egypt 
*/

Register_Function psISO_Short Returns String

// *** These two functions are best used as globals: ***
    // Helper functions used by the class.
    Function LeftFill2 Global String sString Integer iWidth String sFillChar Returns String
        Function_Return (Insert(Repeat(sFillChar,0 max (iWidth-Length(Trim(sString)))),Trim(sString),0))
    End_Function
    
    Function Ordinal Global Integer iNum Returns String
        String sNum
        Move iNum to sNum
        If (Mid(sNum,1,Length(sNum)-1) = 1) Begin
            Function_Return (sNum-"th")
        End
        // 11th, 113th, 2,312th etc
        Else If (Right(sNum,1) = 1) Begin
            Function_Return (sNum-"st")
        End
        Else If (Right(sNum,1) = 2) Begin
            Function_Return (sNum-"nd")
        End
        Else If (Right(sNum,1) = 3) Begin
            Function_Return (sNum-"rd")
        End
        Else Begin
            Function_Return (sNum-"th")
        End
    End_Function

Class cCalendarHolidays is a cObject

    Procedure Construct_Object
        Forward Send Construct_Object
        
        { Visibility = Public }
        { MethodType = Property }
        { Description = "Struct array with all the worlds ISO_Short-, Official_Short-, ISO_Long- string codes and iISO_Code- integer values." }
        Property tISO_Codes[] pISO_Codes
        
        { Visibility = Public }
        { MethodType = Property }
        { Description = "Struct array with all function names and other info associated with those functions." }
        Property tHolidayFunc[] pHolidayFunctions

        { Visibility = Public }
        { MethodType = Property }
        { Description = "Handle array with all registered cNationalHolidays objects. These packages/objects can be found in 'CountryPackages.pkg'" }
        Property Handle[] phoNationalHolidaysArray
        
        { Visibility = Private }
        Property String[] psArrayAsYear

        Send CollectISOCodes
    End_Procedure

    Procedure End_Construct_Object
        Send DoFillHexValues
        Forward Send End_Construct_Object
    End_Procedure

    Procedure PUBLIC_MESSAGES
    End_Procedure
    
    { Visibility  = Public }
    { Description = "Interface function from this class to cNationalHolidays class objects (CountryPackages.pkg)" }
    Function HolidayName Date dInDate String sISO_Short Boolean ByRef bOfficialHoliday Returns String
        Handle hoNationalHolidays
        String sHolidayName
        
        Get NationalHolidaysObject sISO_Short to hoNationalHolidays
        If (hoNationalHolidays <> 0) Begin
            Get HolidayName of hoNationalHolidays dInDate (&bOfficialHoliday) to sHolidayName
        End
        Function_Return sHolidayName
    End_Function  
    
    { Visibility   = Public }
    { Description  = "This is the reciprocal function, compared to making a call to"}
    { Description  += "any of the 'Holiday Function Library' functions,"}
    { Description += "where you pass a year and get a date variable as the return value."}
    { Description += "For this function: Pass a known date and an ISO_Short 2-character country code."}
    { Description += "Returns a boolean True/False if the date is found in the function library."}
    { Description += "If 'True' is returned, it also returns;"}
    { Description += " - A boolean 'bIsHoliday' as ByRef and a" }
    { Description += " - A ByRef String with the Holiday Name,"}
    { Description += " - A ByRef String with the Function Name,"}
    { Description += "for the passed sISO_Short country code."}
    Function IsDateAHoliday Date dInDate String sISO_Short Boolean ByRef bIsHoliday String ByRef sHolidayName String ByRef sFunctionName Returns Boolean
        Boolean bFound bErr bWasTrappd
        tHolidayFunc[] HolidayFunctions
        Integer iSize iCount iFuncID iYear iLastErr 
        Date dDate

        Move False to bFound
        Move Err to bErr
        Move LastErr to iLastErr
        Move False to Err
        Get IsTrapped of (TrappedErrors(Error_Object_Id)) DFERR_ENTER_VALID_DATE to bWasTrappd
        Send Ignore_Error to Error_Object_Id DFERR_ENTER_VALID_DATE

        Move (DateGetYear(dInDate)) to iYear
        Get pHolidayFunctions to HolidayFunctions
        Move (SizeOfArray(HolidayFunctions)) to iSize
        Decrement iSize 
        
        For iCount from 0 to iSize
            Move (Eval("get_" - HolidayFunctions[iCount].sName)) to iFuncID
            Get iFuncID iYear sISO_Short to dDate
            Move (dInDate = dDate) to bFound
            If (Err = True or bFound = True) Begin
                Move HolidayFunctions[iCount].sName to sFunctionName
                Move iSize to iCount // We're out of here
            End
        Loop
        
        If (Err = False and bFound = True and sISO_Short <> "") Begin
            Get HolidayName dInDate sISO_Short (&bIsHoliday) to sHolidayName
        End

        Move (Err = False and LastErr <> DFERR_ENTER_VALID_DATE and String(dDate) <> "") to bFound
        Move bErr to Err
        Move iLastErr to LastErr
        
        Function_Return bFound
    End_Function

    { Visibility = Public }
    { Description = "To get the Offical_Short national ISO code, from a sISO_Short code."}
    Function ISO_ShortToOfficial_Short String sISO_Short Returns String
        tISO_Codes[] AllISOCodes
        tISO_Codes ISOShort
        Integer iItem 
        String sOfficial_Short
        
        Move "" to sOfficial_Short
        Move (Uppercase(sISO_Short)) to ISOShort.sIso_Short
        Get pISO_Codes to AllISOCodes
        Move (SearchArray(ISOShort, AllISOCodes)) to iItem 
        If (iItem <> -1) Begin
            Move AllISOCodes[iItem].sOffical_Short to sOfficial_Short
        End
        
        Function_Return sOfficial_Short
    End_Function 
    
    { Visibility = Public }
    { Description  = "To get the ISO_Short national ISO code, from a sISO_Long code."}
    { Description += "An ISO_Short code is 2-characters, while an ISO_Long is 3-characters."}
    Function ISO_LongToISO_Short String sISO_Long Returns String
        tISO_Codes[] ISO_CodesArray
        String sCode
        Integer iSize iCount
        
        Move "" to sCode
        Move (Uppercase(sISO_Long)) to sISO_Long 
        Get pISO_Codes to ISO_CodesArray
        Move (SizeOfArray(ISO_CodesArray)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            If (ISO_CodesArray[iCount].sISO_Long = sISO_Long) Begin
                Function_Return ISO_CodesArray[iCount].sISO_Short
            End
        Loop
        Function_Return sCode
    End_Function

    { Visibility = Public }
    { Description  = "To get the ISO_Short code (2-character) for the current machine, with a Windows API call."}
    Function WindowsLocaleISO_Short Returns String
        String sISO_Long sISO_Short
        Get WindowsLocaleValue LOCALE_SABBREVCTRYNAME to sISO_Long
        Get ISO_LongToISO_Short sISO_Long to sISO_Short
        Function_Return sISO_Short
    End_Function
    
    { Visibility = Public }
    Function MonthNameFromInteger Integer iMthNo Boolean bLongName Boolean bCapsFirstLetter Returns String
        String sMonthName
        Pointer lpsMonthName
        Integer iVoid iMonth
        
        Case Begin
            Case (iMthNo = 1)                                 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME1         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME1   to iMonth
                End
                Case Break
            Case (iMthNo = 2) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME2         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME2   to iMonth
                End
                Case Break
            Case (iMthNo = 3) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME3         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME3   to iMonth
                End
                Case Break
            Case (iMthNo = 4) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME4         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME4   to iMonth
                End
                Case Break
            Case (iMthNo = 5) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME5         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME5   to iMonth
                End
                Case Break
            Case (iMthNo = 6) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME6         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME6   to iMonth
                End
                Case Break
            Case (iMthNo = 7) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME7         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME7   to iMonth
                End
                Case Break
            Case (iMthNo = 8) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME8         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME8   to iMonth
                End
                Case Break
            Case (iMthNo = 9) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME9         to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME9   to iMonth
                End
                Case Break
            Case (iMthNo = 10) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME10        to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME10  to iMonth
                End
                Case Break
            Case (iMthNo = 11)
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME11        to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME11  to iMonth
                End
                Case Break
            Case (iMthNo = 12)
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME12        to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME12  to iMonth
                End
                Case Break
            Case (iMthNo = 13) 
                If (bLongName = True) Begin
                    Move LOCALE_SMONTHNAME13        to iMonth
                End 
                Else Begin
                    Move LOCALE_SABBREVMONTHNAME13  to iMonth
                End
                Case Break
        Case End
    
        Move (ZeroString(20)) to sMonthName
        Move (AddressOf(sMonthName)) to lpsMonthName
        Move (GetLocaleInfo(LOCALE_USER_DEFAULT, iMonth, lpsMonthName, 20)) to iVoid
       
        If (bCapsFirstLetter = True) Begin
            Move (Uppercase(Left(sMonthName, 1)) + Mid(sMonthName, Length(sMonthName), 2)) to sMonthName
        End
       
        Function_Return sMonthName
    End_Function

    { Visibility = Public }
    { Description = "It is assumed here that Monday is the first day of the week." }
    Function DayNameFromInteger Integer iDayNo Boolean bLongName Boolean bCapsFirstLetter Returns String
        String sDayName
        Pointer lpsDayName
        Integer iVoid iDay
    
        Case Begin
            Case (iDayNo = 1) 
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME1           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME1     to iDay
                End
                Case Break
            Case (iDayNo = 2) 
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME2           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME2     to iDay
                End
                Case Break
            Case (iDayNo = 3)
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME3           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME3     to iDay
                End
                Case Break
            Case (iDayNo = 4)
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME4           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME4     to iDay
                End
                Case Break
            Case (iDayNo = 5) 
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME5           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME5     to iDay
                End
                Case Break
            Case (iDayNo = 6) 
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME6           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME6     to iDay
                End
                Case Break
            Case (iDayNo = 7) 
                If (bLongName = True) Begin
                    Move LOCALE_SDAYNAME7           to iDay
                End 
                Else Begin
                    Move LOCALE_SABBREVDAYNAME7     to iDay
                End
                Case Break
        Case End
    
        Move (ZeroString(20)) to sDayName
        Move (AddressOf(sDayName)) to lpsDayName
        Move (GetLocaleInfo(LOCALE_USER_DEFAULT, iDay, lpsDayName, 20)) to iVoid
    
        If (bCapsFirstLetter = True) Begin
            Move (Uppercase(Left(sDayName, 1)) + Mid(sDayName, Length(sDayName), 2)) to sDayName
        End
    
        Function_Return sDayName
    End_Function

    { Visibility = Public }
    { Description  = "Construct a date from integers iYear iMonth and iDay" }
    { Description += "2025-01-22 NS. Changed to use DAW's DateSet global function." }
    Function DateSetDate Integer iYear Integer iMonth Integer iDay Returns Date
        Date dDate
        Move (DateSet(iYear, iMonth, iDay)) to dDate
        Function_Return dDate
    End_Function
    
    { Visibility = Public }
    Function IsLeapYear Integer iYear Returns Boolean
        Function_Return ((not(Mod(iYear, 4))) and (Mod(iYear, 100)) and (Mod(iYear, 400)))
    End_Function

    { Visibility = Public }
    { Description  = "Check if a date represented as a string is valid." }
    { Description += " Returns true if date is valid; false otherwise." }
    { Description += "Note: It preserves the state of the Err and LastErr global variables." }
    { Description += "      For some odd reason this gives a false positive;" }
    { Description += "      'Move (IsDateValid(sValue)) to bOK'" }
    { Description += "       even if the sValue = "" or sValue = "xfsdf" (!)" }
    Function IsValidDateString String sDate Returns Boolean
        Date dDate
        DateTime dtDate
        Boolean bWasTrappd bErr bOK bIsLeapYear
        Integer iLastErr iYear iMonth iDay iMonthDays
        
        Move Err to bErr
        Move LastErr to iLastErr
        Move False to Err
        Get IsTrapped of (TrappedErrors(Error_Object_Id)) DFERR_ENTER_VALID_DATE to bWasTrappd
        Send Ignore_Error to Error_Object_Id DFERR_ENTER_VALID_DATE
        Move (Date(sDate)) to dDate
        Move sDate to dtDate
        If (bWasTrappd) Begin
            Send Trap_Error to Error_Object_Id DFERR_ENTER_VALID_DATE
        End 
        If (Err = False) Begin  
            Move (DateGetYear(dtDate))  to iYear
            Move (DateGetMonth(dtDate)) to iMonth
            Move (DateGetDay(dtDate))   to iDay
            Move (not(iYear > 1753 and iMonth > 0 and iMonth <= 12 and iDay > 0 and iDay <= 31)) to Err
            If (not(Err) and iMonth = 2) Begin 
                Get IsLeapYear iYear to bIsLeapYear 
                Move (If(bIsLeapYear, 29, 28)) to iMonthDays
                Move (iDay > iMonthDays) to Err
            End
        End
        Move (Err = False and LastErr <> DFERR_ENTER_VALID_DATE and String(dDate) <> "") to bOK
        Move bErr to Err
        Move iLastErr to LastErr
        
        Function_Return bOK
    End_Function
    
    { Visibility = Public }
    { Description  = "IsInteger returns True if the value held by the sValue parameter is an integer (the function does not handle thousand seps)." }
    { Description += "Note that even if this function returns True it may still not be possible to 'Move' the value to an integer variable. This will" }
    { Description += "be the case if the value falls outside of the integer value range (-2147483648 to 2147483647)" }
    Function IsInteger String sValue Returns Boolean
        Integer iPos iLen 
        If (Trim(sValue) = "") Begin
            Function_Return False
        End
        Move (Trim(sValue)) to sValue
        If (Left(sValue,1)="-") Begin
            Move (Replace("-",sValue,"")) to sValue
        End
        Move (Length(sValue)) to iLen
        For iPos from 1 to iLen
            If (not(Pos(Mid(sValue,1,iPos),"0123456789"))) Begin
                Function_Return False
            End
        Loop
        Function_Return True
    End_Function

    { Visibility = Public }
    { Description  = "Given the number of a day in the week, return its short name." }
    { Description += "Day 1 is Sunday." }
    Function GetDayName Integer iWeekDay Returns String
        String sDayName
        Get DayNameFromInteger iWeekDay False True to sDayName
        Function_Return sDayName
    End_Function
    
    { Visibility = Public }
    Function GetDayNameLong Integer iWeekDay Returns String
        String sDayName
        Get DayNameFromInteger iWeekDay True True to sDayName
        Function_Return sDayName
    End_Function
    
    { Visibility = Public }
    { Description = "Given a data (or DateTime) return the short name of the day of the week." }
    Function DateGetDayNameLong DateTime dtDate Returns String
        Integer iWeekday 
        String sDay
        Get DateGetDayofWeek_WDS dtDate 2 to iWeekday
        Get GetDayNameLong iWeekday to sDay
        Move (Trim(sDay)) to sDay
        Function_Return sDay
    End_Function
    
    { Visibility = Public }
    { Description = "Given a data (or DateTime) return the short name of the day of the week." }
    Function DateGetDayName DateTime dtDate Returns String
        Integer iWeekday 
        String sDay
        Move (DateGetDayofWeek(dtDate)) to iWeekday
        Get GetDayName iWeekday to sDay
        Function_Return sDay
    End_Function
    
    { Visibility = Public }
    { Description = "Given the number of a month, return its name." }
    Function GetMonthName Integer iMthNo Returns String
        String sMonthName
        Get MonthNameFromInteger iMthNo False True to sMonthName
        Function_Return sMonthName
    End_Function
    
    { Visibility = Public }
    { Description = "Given a date (or DateTime) return the name of the month." }
    Function DateGetMonthName Date dtDate Returns String 
        String sMonth
        Get GetMonthName (DateGetMonth(dtDate)) to sMonth
        Function_Return sMonth
    End_Function
    
    { Visibility = Public }
    Function GetMonthNameLong Integer iMthNo Returns String
        String sMonthName
        Get MonthNameFromInteger iMthNo True True to sMonthName
        Function_Return sMonthName
    End_Function
    
    { Visibility = Public }
    { Description = "Given a date (or DateTime) return the name of the month." }
    Function DateGetMonthNameLong Date dtDate Returns String
        String sMonth
        Get GetMonthNameLong (DateGetMonth(dtDate)) to sMonth
        Function_Return sMonth
    End_Function
    
    { Visibility = Public }
    { Description = "Given a date (or DateTime) return the number of days in the month." }
    Function DateGetDaysInMonth DateTime dtDate Returns Integer
        Integer iMth iYr iDays
        Move (DateGetMonth(dtDate)) to iMth
        If ("4,6,9" contains iMth or iMth = 11) Begin
            Move 30 to iDays
        End
        Else If (iMth = 2) Begin
            Move (DateGetYear(dtDate))       to iYr
            Move (If(Mod(iYr,4) = 0 and (Mod(iYr,100) <> 0 or Mod(iYr,400) = 0),29,28)) to iDays
        End
        Else Begin
            Move 31 to iDays
        End
        Function_Return iDays
    End_Function
    
    { Visibility = Public }
    { Description  = "Return the number of the day of the week according to the ISO definition -" }
    { Description += "Moday is day 1." }
    { Description += "The built-in function DateGetDayOfWeek returns Sunday as 1." }
    { Description += "'The great advantage of having International Standards is that they make" }
    { Description += "it easy for the American people to differ from everybody else.'" }
    Function DateGetISODayOfWeek DateTime dtDate Returns Integer
        Integer iDayNo
        Move (DateGetDayOfWeek(dtDate)) to iDayNo
        Function_Return (If(iDayNo = 1,7,iDayNo - 1))
    End_Function
    
    { Visibility = Public }
    { Description  = "Return the week number (ISO 8601 definition - weeks start on a Monday" }
    { Description += "and week 1 of any year is that with the year's first Thursday in it)." }
    { Description += "Changed 2025-01-22 NS. Now uses the DAW DateGetWeekOfYearISO function instead." }
    Function DateGetISOWeek DateTime dtDate Returns Integer
        Integer iWeek
        Move (DateGetWeekOfYearISO(dtDate)) to iWeek
        Function_Return iWeek
    End_Function
    
    { Visibility = Public }
    { Description  = "Return the Year of the Week (ISO 8601 definition - weeks start on a Monday" }
    { Description += "and week 1 of any year is that with the year's first Thursday in it) containing" }
    { Description += "the date passed." }
    { Description += "Algorithm (from Wikipedia: http://en.wikipedia.org/wiki/Talk:ISO_week_date#Algorithms)" }
    { Description += "Determine the date's Day of Week, D" }
    { Description += "Use that to move to the nearest Thursday (-3..+3 days)" }
    { Description += "The result the year of that Date, Y" }
    Function DateGetISOYear DateTime dtDate Returns Integer
        Integer  iDayNo
        Date     dDate dNearestThu
    
        Move dtDate to dDate
        Get DateGetISODayOfWeek dDate to iDayNo
        Move (dDate - iDayNo + 4) to dNearestThu  // go to previous Thursday
        Function_Return (DateGetYear(dNearestThu))
    End_Function
    
    { Visibility = Public }
    { Description = "Return a date in the ISO format Year-Week-Day (e.g. '2009-W53-7')" }
    Function DateGetISOWeekDate DateTime dtDate Returns String
        Integer iWeek
        String sYear sDays
        Get DateGetISOYear dtDate to sYear
        Get DateGetISOWeek dtDate to iWeek
        Get DateGetISODayOfWeek dtDate to sDays
        Function_Return (sYear - "-W" - LeftFill2(iWeek,2,0) - "-" - sDays)
    End_Function
    
    { Visibility = Public }
    { Description = "Given a date (or DateTime) return the date (DateTime) of the last day in the month." }
    Function DateGetLastDayOfMonth DateTime dtDate Returns DateTime
        DateTime dtLastDate 
        Integer iDays
        Get DateGetDaysInMonth dtDate to iDays
        Move (DateSetDay(dtDate, iDays)) to dtLastDate
        Function_Return dtLastDate
    End_Function
    
    { Visibility = Public }
    { Description = "Given a date (or DateTime) return the date (DateTime) of the first day of the year" }
    Function DateGetFirstDayOfYear DateTime dtDate Returns DateTime
        Move (DateSetDay(dtDate,1))   to dtDate
        Move (DateSetMonth(dtDate,1)) to dtDate
        Function_Return dtDate
    End_Function
    
    { Visibility = Public }
    { Description = "Given a date (or DateTime) return the date (DateTime) of the Last day of the year" }
    Function DateGetLastDayOfYear DateTime dtDate Returns DateTime
        Move (DateSetMonth(dtDate,12)) to dtDate
        Move (DateSetDay(dtDate,31))   to dtDate
        Function_Return dtDate
    End_Function
    
    { Visibility = Public }
    { Description  = "Given a date (or DateTime) advance or retard it by a given number of months." }
    { Description += "If the original date happens to be the last day of the month, and you want the" }
    { Description += "returned date to be the last day of the new month (e.g.  - if advancing by one" }
    { Description += "month - you would want 28th February to become 31st March rather than 28th March" }
    { Description += "or 30th April to become 31st May) pass the optional boolean parameter as a true" }
    { Description += "value (the 31st May will always become 30th June etc.)." }
    { Description += "If bLastDay is present and True the last day of the new month will be returned." }
    { Description += "Use this if you want the 28th February to become eg 31st March or 30th April to become 31st May." }
    Function DateChangeMonth DateTime dtDate Integer iMths Boolean bLastDay Returns DateTime
        Integer iDay iMth iYr iYrs iLastDay iDays
        Boolean bIsLast
        Move (DateGetDay(dtDate))   to iDay
        Move (DateGetMonth(dtDate)) to iMth
        Move (DateGetYear(dtDate))  to iYr       
        Get DateGetDaysInMonth dtDate to iDays
        If (num_arguments > 2 and bLastDay and iDay = iDays) Begin
            Move True to bIsLast
        End
        Move (iMth + iMths) to iMth
        If (iMth > 12) Begin
            Move (iMth / 12) to iYrs
            Move (Mod(iMth,12)) to iMth
        End
        While (iMth < 1)
            Move (iMth + 12) to iMth
            Decrement iYrs
        Loop
        Move (DateSetDay(dtDate,1)) to dtDate
        If (iMth < 12 or iYr =< 2500) Begin
            Move (DateSetMonth(dtDate,iMth)) to dtDate
        End
        Move (DateSetYear(dtDate,0 max (iYr + iYrs) min 2500)) to dtDate
        Get DateGetDaysInMonth dtDate to iLastDay
        If (bIsLast) Begin
            Move iLastDay to iDay
        End
        Else Begin
            Move (iDay min iLastDay) to iDay
        End
        Function_Return (DateSetDay(dtDate,iDay))
    End_Function
    
    { Visibility = Public }
    { Description  = "Given a date (or DateTime) advance or retard it by a given number of years." }
    { Description += "The last day of the month is treated as for DateChangeMonth." }
    Function DateChangeYear DateTime dtDate Integer iYrs Boolean bLastDay Returns DateTime
        // If bLastDay is present and True the last day of the new month will be returned.
        // Use this if you want the 28th February 2007 to become eg 29th Feburary 2008.
        Integer iDay iYr iLastDay
        Move (DateGetDay(dtDate))   to iDay
        Move (DateGetYear(dtDate))  to iYr
        Move (DateSetDay(dtDate,1)) to dtDate
        Move (DateSetYear(dtDate,0 max (iYr + iYrs) min 2500)) to dtDate
        Get DateGetDaysInMonth dtDate to iLastDay
        If (num_arguments > 2 and bLastDay) Begin
            Move iLastDay to iDay
        End
        Else Begin
            Move (iDay min iLastDay) to iDay
        End
        Function_Return (DateSetDay(dtDate,iDay))
    End_Function
    
    { Visibility = Public }
    { Description  = "Formats a dDate to a string according to the passed format token string" }
    { Description += "The last day of the month is treated as for DateChangeMonth." }
    { Description += "Format tokens:" }
    { Description += "d     - Day of month as digits with no leading zero for single-digit days. " }
    { Description += "dd    - Day of month as digits with leading zero for single-digit days." }
    { Description += "ddd   - Day of week as a three-letter abbreviation. The Function uses the LOCALE_SABBREVDAYNAME value associated with the specified locale." }
    { Description += "dddd  - Day of week as its full name. The Function uses the LOCALE_SDAYNAME value associated with the specified locale." }
    { Description += "M     - (Note the capsed 'M'.) Month as digits with no leading zero for single-digit months." }
    { Description += "MM    - Month as digits with leading zero for single-digit months." }
    { Description += "MMM   - Month as a three-letter abbreviation. The Function uses the LOCALE_SABBREVMONTHNAME value associated with the specified locale." }
    { Description += "MMMM  - Month as its full name. The Function uses the LOCALE_SMONTHNAME value associated with the specified locale." }
    { Description += "y     - Year as last two digits, but with no leading zero for years less than 10." }
    { Description += "yy    - Year as last two digits, but with leading zero for years less than 10." }
    { Description += "yyyy  - Year represented by full four or five digits, depending on the calendar used. Thai Buddhist and Korean calendars both have five digit years. The "yyyy" pattern will Show five digits for these two calendars, and four digits for all other supported calendars." }
    { Description += "yyyyy - Identical to "yyyy"." }
    { Description += "gg    - Period/era String. The Function uses the CAL_SERASTRING value associated with the specified locale. This element is ignored If the Date to be formatted does not have an associated era or period String." }
    { Description += "Exemples:" }
    { Description += "  Move (sDateFormat(4/3/2002,"dddd ,d 'de' MMMM 'de' yyyy")) to sRet" }
    { Description += "  sRet = 'Quarta-Feira, 3 de abril de 2002'" }
    { Description += "  Move (sDateFormat(30/09/2006,'dd/MM/yy')) to sRet" }
    { Description += "  sRet = '30/09/06'" }
    Function DateFormat Date dDate String sFormatToken Returns String
        String sDateRet 
        WString wsFormat wsFormattedDate 
        tSystemTimeType tSt
        Pointer pDate psRet
        Integer iRet iDataLength
        
        If (Num_Arguments = 2) Begin
            Move sFormatToken to wsFormat
        End
        
        If (dDate > 0) Begin
            Move (DateGetYear(dDate))  to tSt.wYear
            Move (DateGetMonth(dDate)) to tSt.wMonth
            Move (DateGetDay(dDate))   to tSt.wDay
            Move (AddressOf(tSt)) to pDate
        End
        Else Begin
            Move 0 to pDate
        End
            
        // Determine the length
        Move (WindowsAPI_GetDateFormatW( LOCALE_USER_DEFAULT , 0 , pDate , AddressOf(wsFormat) , 0 , 0 )) to iDataLength
        Move (ZeroString(iDataLength)) to wsFormattedDate
        Move (AddressOf(wsFormattedDate)) to psRet
        // format it
        Move (WindowsAPI_GetDateFormatW( LOCALE_USER_DEFAULT , 0 , pDate , AddressOf(wsFormat) , psRet , iDataLength )) to iRet
        Move (cString(wsFormattedDate)) to sDateRet // convert back to df-string (utf-8)
            
        // Uppercase first day name character:
        Move (Uppercase(Left(sDateRet,1)) + Mid(sDateRet, Length(sDateRet), 2)) to sDateRet
        Function_Return sDateRet
    End_Function

    { Visibility = Public }
    { Description  = "Formats a Time variable according to the passed token string" }
    { Description += "Parameters:" }
    { Description += "A Time variable" }
    { Description += "Format tokens:" }
    { Description += "h  - Hours with no leading zero for single-digit hours; 12-hour clock." }
    { Description += "hh - Hours with leading zero for single-digit hours; 12-hour clock." }
    { Description += "H  - Hours with no leading zero for single-digit hours; 24-hour clock." }
    { Description += "HH - Hours with leading zero for single-digit hours; 24-hour clock." }
    { Description += "m  - Minutes with no leading zero for single-digit minutes." }
    { Description += "mm - Minutes with leading zero for single-digit minutes." }
    { Description += "s  - Seconds with no leading zero for single-digit seconds." }
    { Description += "ss - Seconds with leading zero for single-digit seconds." }
    { Description += "t  - One character Time marker String, such as A or P." }
    { Description += "tt - Multicharacter Time marker String, such as AM or PM." }
    Function TimeFormat Time tTime String sFormatToken Returns String
        String sTimeRet sTmFormat
        tSystemTimeType tSt
        Time tNullTime
        Pointer pTime psRet
        Integer iRet
        
        If (Num_Arguments = 2) Begin
            Move sFormatToken to sTmFormat
        End
        
        If (tTime <> tNullTime) Begin
            Move (DateGetHour(tTime))   to tSt.wHour 
            Move (DateGetMinute(tTime)) to tSt.wMinute 
            Move (DateGetSecond(tTime)) to tSt.wSecond 
            Move (AddressOf(tSt)) to pTime
        End
        Else Move 0 to pTime
            
        Move (ZeroString(30)) to sTimeRet
        Move (AddressOf(sTimeRet)) to psRet
        If (Trim(sTmFormat) <> "") Begin
            Move (sTmFormat + Character(0)) to sTmFormat
        End
            
        Move (WindowsAPI_GetTimeFormat( LOCALE_SYSTEM_DEFAULT , 0 , pTime , sTmFormat , psRet , (Length(sTimeRet)) )) to iRet
        Move (Replaces(Character(0), sTimeRet, "")) to sTimeRet
        
        Function_Return sTimeRet
    End_Function

    { Visibility = Public }
    { Description = "Returns the current time formatted according to the sFormatToken" }
    Function CurrentTimeFormat String sFormatToken Returns String
        Time tVar
        String sTmFormat sRet
        
        If (Num_Arguments = 1) Begin
            Move sFormatToken to sTmFormat
        End
        Get TimeFormat tVar sTmFormat to sRet
       
        Function_Return sRet
    End_Function

    { Visibility = Public }
    { Description = "Amended to use built-in date functions" }
    Function YearFromDate Date dDate Returns Integer
        Function_Return (DateGetYear(dDate))
    End_Function
    
    Procedure PRIVATE_MESSAGES // For the Studio Code Explorer
    End_Procedure

    { Visibility = Private }
    { Description  = "Collects data from all functions of the oCalendarHoldays object." }
    { Description += "Saves the data in the pHolidayFunctions struct array property." }
    Procedure RegisterInterface Handle hMsg String sMsgName String sParams String sComment
        Handle hNewTest       
        String sReturnType
        tHolidayFunc   HolidayFunction
        tHolidayFunc[] HolidayFuncArray
        tHolidayFuncVar[] HolidayFuncVarArray
        
        If (Left(sMsgName, 4) = "msg_") Begin
            Move (Replace("msg_", sMsgName, "")) to sMsgName
        End
        If (Left(sMsgName, 4) = "get_") Begin
            Move (Replace("get_", sMsgName, "")) to sMsgName
        End
        
        If (sParams <> "") Begin
            Get ExtractParams sParams (&sReturnType) to HolidayFuncVarArray
            Move HolidayFuncVarArray to HolidayFunction.HolidayFuncVarArray 
            Move sReturnType         to HolidayFunction.sReturnType
        End
        Get pHolidayFunctions to HolidayFuncArray
        Move sMsgName         to HolidayFunction.sName
        Move sComment         to HolidayFunction.sHelp
        Move HolidayFunction  to HolidayFuncArray[-1] 
        Move (SortArray(HolidayFuncArray)) to HolidayFuncArray
        Set pHolidayFunctions to HolidayFuncArray
    End_Procedure
    
    { Visibility = Private }
    { Description = "Helper function for the Procedure RegisterInterface." }
    Function ExtractParams String sParams String ByRef sReturnType Returns tHolidayFuncVar[]
        tHolidayFuncVar[] HolidayFuncVarArray
        String[] asParams
        Integer iCount iSize iParam
        Move 0 to iParam
        Move (StrSplitToArray(sParams, " ")) to asParams
        Move (SizeOfArray(asParams)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            If (Lowercase(asParams[iCount]) = "returns") Begin
                Increment iCount
                Move asParams[iCount] to sReturnType
                Move iSize to iCount // Get out of here.
            End
            Else Begin
                Move asParams[iCount] to HolidayFuncVarArray[iParam].sType
                Increment iCount
                Move asParams[iCount] to HolidayFuncVarArray[iParam].sVarName 
                Increment iParam
            End
        Loop    
        Function_Return HolidayFuncVarArray
    End_Function
    
    { Visibility = Private }
    { Description = "Returns the national holiday object handle for the passed sISO_Short code" } 
    Function NationalHolidaysObject String sISO_Short Returns Handle
        Integer iCount
        Handle[] hoNationalHolidaysArray
        Get phoNationalHolidaysArray to hoNationalHolidaysArray
        For iCount from 0 to (SizeOfArray(hoNationalHolidaysArray) - 1)
            If (psISO_Short(hoNationalHolidaysArray[iCount]) = sISO_Short) Begin
                Function_Return hoNationalHolidaysArray[iCount]
            End
        Loop
        Function_Return 0
    End_Function 
    
    { Visibility = Private }
    { Description = "Message used by the cNationalHolidays class to register itself in this class." } 
    Procedure RegisterNationalHolidays Handle hoNationalHolidays
        Handle[] hoNationalHolidaysArray
        Get phoNationalHolidaysArray to hoNationalHolidaysArray
        Move hoNationalHolidays to hoNationalHolidaysArray[SizeOfArray(hoNationalHolidaysArray)]
        Set phoNationalHolidaysArray to hoNationalHolidaysArray
    End_Procedure
    
    { Visibility = Private }
    Function WindowsLocaleValue Integer iLocaleId Returns String
        WString sValue wsResult
        Pointer lpValue
        Integer iRetval
    
        Move (AddressOf(sValue)) to lpValue
        Move (WinAPI_GetLocaleInfoEx(AddressOf(sValue), iLocaleId, 0, 0)) to iRetval
        Move (ZeroString (iRetval)) to wsResult
        Move (WinAPI_GetLocaleInfoEx(AddressOf(sValue), iLocaleId, AddressOf(wsResult), iRetval)) to iRetval
    
        Function_Return (Cstring(wsResult))
    End_Function

    { Visibility = Private }
    { Description  = "This function is being used both by the MothersDay.pkg and NationalDays.pkg." }
    { Description += "Helper function for the NationalDay function (internal - no error handling)" }
    { Description += "Great Britain (U.K.) has a moving National Day - and falls on the second Saturday in June." }
    { Description += "Function UKNationalDay" }
    { Description += "Params:  4-digit integer Year" }
    { Description += "Returns: 4-character string in the format: MMDD" }
    Function UKNationalDay Integer iYear Returns String
        Date   dDate
        String sMonth sDay
        Integer iDayNumber iDateFormat
    
        // Start with 1st of June:
        Get DateSetDate iYear 6 1 to dDate
        Get DateGetISODayOfWeek dDate to iDayNumber
    
        // If iDayNumber = Sunday, add 6 days to next Saturday.
        If (iDayNumber = 7) Begin
            Move (6 + dDate) to dDate
        End
        // Else if iDayNumber is less then Saturday, add number of days to next Saturday.
        Else If (iDayNumber < 5) Begin
            Move ((6 - iDayNumber) + dDate) to dDate
        End
    
        // Add the second week.
        Move (dDate + 7) to dDate
    
        // And get the month and day.
        Get_Attribute DF_DATE_FORMAT to iDateFormat
        Set_Attribute DF_DATE_FORMAT to DF_DATE_USA
        Move (Left(dDate, 2))        to sMonth
        Move (Mid(dDate, 2, 4))      to sDay
        Set_Attribute DF_DATE_FORMAT to iDateFormat // Reset date format.
    
        Function_Return (String(sMonth) + String(sDay))
    End_Function

    { Visibility = Private }
    Function HexToBinary Number nNum Returns String
        String sString

        Repeat
            Move (String(Round(Number(nNum/2)-Integer(nNum/2)))+sString) to sString
            Move (Integer(nNum/2)) to nNum
        Until (nNum=0)
        Function_Return (Right('0000'+sString,4))
    End_Function

    { Visibility = Private }
    Function HexLeapMonth Integer iYear Returns Integer
        String[] sArrayAsYear
        Get psArrayAsYear to sArrayAsYear
        Function_Return ('$'+Right(sArrayAsYear[iYear-1900],1))
    End_Function

    { Visibility = Private }
    Function HexLeapDays Integer iYear Returns Integer
        Integer iLeapMonth iDay
        String[] sArrayAsYear

        Get psArrayAsYear to sArrayAsYear
        Get HexLeapMonth iYear to iLeapMonth
        If (iLeapMonth) Begin
            Move (If(Mid(sArrayAsYear[iYear-1900],1,2)=1,30,29)) to iDay
        End
        Function_Return iDay
    End_Function

    { Visibility = Private }
    Function HexMonthDays Integer iYear Integer iMonth Returns Integer
        Integer iLoop
        String  sTemp sString
        String[] sArrayAsYear

        Get psArrayAsYear to sArrayAsYear
        For iLoop From 0 to 2
            Get HexToBinary ('$'+Mid(sArrayAsYear[iYear-1900],1,3+iLoop)) to sTemp
            Move (sString+sTemp) to sString
        Loop
        Function_Return (If(Mid(sString,1,iMonth)=1,30,29))
    End_Function

    { Visibility = Private }
    Function HexYearDays Integer iYear Returns Integer
        Integer iDays iLoop iString
        String  sString
        String[] sArrayAsYear

        Get psArrayAsYear to sArrayAsYear
        Move 348 to iDays
        Add (HexLeapDays(Self,iYear)) to iDays
        For iLoop From 0 to 2
            Get HexToBinary ('$'+Mid(sArrayAsYear[iYear-1900],1,3+iLoop)) to sString
            For iString From 1 to 4
                Add (Mid(sString,1,iString)) to iDays
            Loop
        Loop
        Function_Return iDays
    End_Function
    
    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function ChineseLunar Date dDate Returns tLunar
        Integer iOffset iLoop iTemp iLeapMonth
        tLunar Lunar
        Date dSetDate
        
        Get DateSetDate 1900 1 31 to dSetDate
        Move (dDate - dSetDate - 1) to iOffset

        For iLoop from 1900 to 2050
            If (iOffset>0) Begin
                Get HexYearDays iLoop to iTemp
                Subtract iTemp from iOffset
            End
            Else Begin
                Move iLoop to Lunar.iYear
                Move 2050 to iLoop
            End
        Loop
        If (iOffset<0) Begin
            Add iTemp to iOffset
            Subtract 1 from Lunar.iYear
        End
        Get HexLeapMonth Lunar.iYear to iLeapMonth
        Move False to Lunar.bLeap

        For iLoop from 1 to 13
            If (iOffset>0) Begin
                If (iLeapMonth>0 and iLoop=(iLeapMonth+1) and Lunar.bLeap=False) Begin
                    Subtract 1 from iLoop
                    Move True to Lunar.bLeap
                    Get HexLeapDays Lunar.iYear to iTemp
                End
                Else Begin
                    Get HexMonthDays Lunar.iYear iLoop to iTemp
                End
                If (Lunar.bLeap=True and iLoop=(iLeapMonth+1)) Begin
                    Move False to Lunar.bLeap
                End
                Subtract iTemp from iOffset
            End
            Else Begin
                Move iLoop to Lunar.iMonth
                Move 13 to iLoop
            End
        Loop
        If (iOffset=0 and iLeapMonth>0 and iLoop=(iLeapMonth+1)) Begin
            If (Lunar.bLeap) Begin
                Move False to Lunar.bLeap
            End
            Else Begin
                Move True to Lunar.bLeap
                Subtract 1 from Lunar.iMonth
            End
        End
        If (iOffset<0) Begin
            Add iTemp to iOffset
            Subtract 1 from Lunar.iMonth
        End
        Move (iOffset+1) to Lunar.iDay
        Function_Return Lunar
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function IslamicCalendar Date dDate Returns tLunar
        Integer iYear iMonth iDay iAlpha iBeta iJD iDD iJJ iZZ iCyc
        Number  nShift nYear
        tLunar Lunar

        Move (DateGetYear(dDate))  to iYear
        Move (DateGetMonth(dDate)) to iMonth
        Move (DateGetDay(dDate))   to iDay

        If (iMonth<3) Begin
            Subtract 1 from iYear
            Add 12 to iMonth
        End
        Move (Integer(iYear/100.0)) to iAlpha
        Move (2-iAlpha+Integer(iAlpha/4.0)) to iBeta
        If (iYear<1583) Begin
            Move 0 to iBeta
        End
        If (iYear=1582) Begin
            If (iMonth>10) Begin
                Move -10 to iBeta
            End
            If (iMonth=10) Begin
                Move 0 to iBeta
                If (iDay>4) Begin
                    Move -10 to iBeta
                End
            End
        End
        Move (Integer(365.25*(iYear+4716))+Integer(30.6001*(iMonth+1))+iDay+iBeta-1524) to iJD
        Move 0 to iBeta
        If (iJD>2299160) Begin
            Move (Integer((iJD-1867216.25)/36524.25)) to iAlpha
            Move (1+iAlpha-Integer(iAlpha/4.0)) to iBeta
        End
        Move (iJD+iBeta+1524) to iBeta
        Move (Integer(365.25*Integer((iBeta-122.1)/365.25))) to iDD
        Move (iBeta-iDD-Integer(30.6001*Integer((iBeta-iDD)/30.6001))) to iDay
        Move (10631.0/30.0) to nYear
        Move (8.01/60.0) to nShift // results in years 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 & 29 as leap years
        Move (iJD-1948084) to iZZ
        Move (iZZ/10631.0) to iCyc
        Move (iZZ-(10631*iCyc)) to iZZ
        Move (Integer((iZZ-nShift)/nYear)) to iJJ
        Move (30*iCyc+iJJ) to Lunar.iYear
        Move (iZZ-Integer(iJJ*nYear+nShift)) to iZZ
        Move (Integer((iZZ+28.5001)/29.5)) to Lunar.iMonth
        If (Lunar.iMonth=13) Begin
            Move 12 to Lunar.iMonth
        End
        Move (iZZ-Integer(29.5001*Lunar.iMonth-29)) to Lunar.iDay
        Function_Return Lunar
    End_Function
    
    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function ChineseNewYear Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        If (DateGetYear(dDate) <2050) Begin
            Get ChineseLunar dDate to Lunar
        End
        If (Lunar.bLeap=False and Lunar.iMonth=1 and (Lunar.iDay=1 or Lunar.iDay=2)) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function VesakDay Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        If (DateGetYear(dDate)<2050) Begin
            Get ChineseLunar dDate to Lunar
        End
        If (Lunar.bLeap=False and Lunar.iMonth=4 and Lunar.iDay=15) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function ProphetMuhammadBirthday Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=3 and Lunar.iDay=12) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function HariRayaPuasa Date dDate String sISO_Short Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=10) Begin
            If (sISO_Short="MY") Begin
                If (Lunar.iDay=1 or Lunar.iDay=2) Begin
                    Move dDate to dReturn
                End
            End
            Else If (sISO_Short = "SG") Begin
                If (Lunar.iDay=1) Begin
                    Move dDate to dReturn
                End
            End
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function HariRayaHaji Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=12 and Lunar.iDay=10) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function HariRayaHaji2ndDay Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=12 and Lunar.iDay=11) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function AwalMuharram Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=1 and Lunar.iDay=1) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function IsrakMikraj Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=7 and Lunar.iDay=28) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function AwalRamadan Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=9 and Lunar.iDay=2) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Not used. More work needed" }
    Function NuzulAlQuran Date dDate Returns Date
        Date dReturn
        tLunar Lunar

        Get IslamicCalendar dDate to Lunar
        If (Lunar.iMonth=9 and Lunar.iDay=18) Begin
            Move dDate to dReturn
        End
        Function_Return dReturn
    End_Function

    { Visibility = Private }
    { Description = "Internal for calculating the Chinese New Year etc." }
    Procedure DoFillHexValues
        String[] sArrayAsYear
        Move '$04bd8' to sArrayAsYear[0]   // Year 1900 ??  dec=19416
        Move '$04ae0' to sArrayAsYear[1]
        Move '$0a570' to sArrayAsYear[2]
        Move '$054d5' to sArrayAsYear[3]
        Move '$0d260' to sArrayAsYear[4]
        Move '$0d950' to sArrayAsYear[5]
        Move '$16554' to sArrayAsYear[6]
        Move '$056a0' to sArrayAsYear[7]
        Move '$09ad0' to sArrayAsYear[8]
        Move '$055d2' to sArrayAsYear[9]
        Move '$04ae0' to sArrayAsYear[10]
        Move '$0a5b6' to sArrayAsYear[11]
        Move '$0a4d0' to sArrayAsYear[12]
        Move '$0d250' to sArrayAsYear[13]
        Move '$1d255' to sArrayAsYear[14]
        Move '$0b540' to sArrayAsYear[15]
        Move '$0d6a0' to sArrayAsYear[16]
        Move '$0ada2' to sArrayAsYear[17]
        Move '$095b0' to sArrayAsYear[18]
        Move '$14977' to sArrayAsYear[19]
        Move '$04970' to sArrayAsYear[20]
        Move '$0a4b0' to sArrayAsYear[21]
        Move '$0b4b5' to sArrayAsYear[22]
        Move '$06a50' to sArrayAsYear[23]
        Move '$06d40' to sArrayAsYear[24]
        Move '$1ab54' to sArrayAsYear[25]
        Move '$02b60' to sArrayAsYear[26]
        Move '$09570' to sArrayAsYear[27]
        Move '$052f2' to sArrayAsYear[28]
        Move '$04970' to sArrayAsYear[29]
        Move '$06566' to sArrayAsYear[30]
        Move '$0d4a0' to sArrayAsYear[31]
        Move '$0ea50' to sArrayAsYear[32]
        Move '$06e95' to sArrayAsYear[33]
        Move '$05ad0' to sArrayAsYear[34]
        Move '$02b60' to sArrayAsYear[35]
        Move '$186e3' to sArrayAsYear[36]
        Move '$092e0' to sArrayAsYear[37]
        Move '$1c8d7' to sArrayAsYear[38]
        Move '$0c950' to sArrayAsYear[39]
        Move '$0d4a0' to sArrayAsYear[40]
        Move '$1d8a6' to sArrayAsYear[41]
        Move '$0b550' to sArrayAsYear[42]
        Move '$056a0' to sArrayAsYear[43]
        Move '$1a5b4' to sArrayAsYear[44]
        Move '$025d0' to sArrayAsYear[45]
        Move '$092d0' to sArrayAsYear[46]
        Move '$0d2b2' to sArrayAsYear[47]
        Move '$0a950' to sArrayAsYear[48]
        Move '$0b557' to sArrayAsYear[49]
        Move '$06ca0' to sArrayAsYear[50]
        Move '$0b550' to sArrayAsYear[51]
        Move '$15355' to sArrayAsYear[52]
        Move '$04da0' to sArrayAsYear[53]
        Move '$0a5b0' to sArrayAsYear[54]
        Move '$14573' to sArrayAsYear[55]
        Move '$052b0' to sArrayAsYear[56]
        Move '$0a9a8' to sArrayAsYear[57]
        Move '$0e950' to sArrayAsYear[58]
        Move '$06aa0' to sArrayAsYear[59]
        Move '$0aea6' to sArrayAsYear[60]
        Move '$0ab50' to sArrayAsYear[61]
        Move '$04b60' to sArrayAsYear[62]
        Move '$0aae4' to sArrayAsYear[63]
        Move '$0a570' to sArrayAsYear[64]
        Move '$05260' to sArrayAsYear[65]
        Move '$0f263' to sArrayAsYear[66]
        Move '$0d950' to sArrayAsYear[67]
        Move '$05b57' to sArrayAsYear[68]
        Move '$056a0' to sArrayAsYear[69]
        Move '$096d0' to sArrayAsYear[70]
        Move '$04dd5' to sArrayAsYear[71]
        Move '$04ad0' to sArrayAsYear[72]
        Move '$0a4d0' to sArrayAsYear[73]
        Move '$0d4d4' to sArrayAsYear[74]
        Move '$0d250' to sArrayAsYear[75]
        Move '$0d558' to sArrayAsYear[76]
        Move '$0b540' to sArrayAsYear[77]
        Move '$0b6a0' to sArrayAsYear[78]
        Move '$195a6' to sArrayAsYear[79]
        Move '$095b0' to sArrayAsYear[80]
        Move '$049b0' to sArrayAsYear[81]
        Move '$0a974' to sArrayAsYear[82]
        Move '$0a4b0' to sArrayAsYear[83]
        Move '$0b27a' to sArrayAsYear[84]
        Move '$06a50' to sArrayAsYear[85]
        Move '$06d40' to sArrayAsYear[86]
        Move '$0af46' to sArrayAsYear[87]
        Move '$0ab60' to sArrayAsYear[88]
        Move '$09570' to sArrayAsYear[89]
        Move '$04af5' to sArrayAsYear[90]
        Move '$04970' to sArrayAsYear[91]
        Move '$064b0' to sArrayAsYear[92]
        Move '$074a3' to sArrayAsYear[93]
        Move '$0ea50' to sArrayAsYear[94]
        Move '$06b58' to sArrayAsYear[95]
        Move '$055c0' to sArrayAsYear[96]
        Move '$0ab60' to sArrayAsYear[97]
        Move '$096d5' to sArrayAsYear[98]
        Move '$092e0' to sArrayAsYear[99]
        Move '$0c960' to sArrayAsYear[100]
        Move '$0d954' to sArrayAsYear[101]
        Move '$0d4a0' to sArrayAsYear[102]
        Move '$0da50' to sArrayAsYear[103]
        Move '$07552' to sArrayAsYear[104]
        Move '$056a0' to sArrayAsYear[105]
        Move '$0abb7' to sArrayAsYear[106]
        Move '$025d0' to sArrayAsYear[107]
        Move '$092d0' to sArrayAsYear[108]
        Move '$0cab5' to sArrayAsYear[109]
        Move '$0a950' to sArrayAsYear[110]
        Move '$0b4a0' to sArrayAsYear[111]
        Move '$0baa4' to sArrayAsYear[112]
        Move '$0ad50' to sArrayAsYear[113]
        Move '$055d9' to sArrayAsYear[114]
        Move '$04ba0' to sArrayAsYear[115]
        Move '$0a5b0' to sArrayAsYear[116]
        Move '$15176' to sArrayAsYear[117]
        Move '$052b0' to sArrayAsYear[118]
        Move '$0a930' to sArrayAsYear[119]
        Move '$07954' to sArrayAsYear[120]
        Move '$06aa0' to sArrayAsYear[121]
        Move '$0ad50' to sArrayAsYear[122]
        Move '$05b52' to sArrayAsYear[123]
        Move '$04b60' to sArrayAsYear[124]
        Move '$0a6e6' to sArrayAsYear[125]
        Move '$0a4e0' to sArrayAsYear[126]
        Move '$0d260' to sArrayAsYear[127]
        Move '$0ea65' to sArrayAsYear[128]
        Move '$0d530' to sArrayAsYear[129]
        Move '$05aa0' to sArrayAsYear[130]
        Move '$076a3' to sArrayAsYear[131]
        Move '$096d0' to sArrayAsYear[132]
        Move '$04bd7' to sArrayAsYear[133]
        Move '$04ad0' to sArrayAsYear[134]
        Move '$0a4d0' to sArrayAsYear[135]
        Move '$1d0b6' to sArrayAsYear[136]
        Move '$0d250' to sArrayAsYear[137]
        Move '$0d520' to sArrayAsYear[138]
        Move '$0dd45' to sArrayAsYear[139]
        Move '$0b5a0' to sArrayAsYear[140]
        Move '$056d0' to sArrayAsYear[141]
        Move '$055b2' to sArrayAsYear[142]
        Move '$049b0' to sArrayAsYear[143]
        Move '$0a577' to sArrayAsYear[144]
        Move '$0a4b0' to sArrayAsYear[145]
        Move '$0aa50' to sArrayAsYear[146]
        Move '$1b255' to sArrayAsYear[147]
        Move '$06d20' to sArrayAsYear[148]
        Move '$0ada0' to sArrayAsYear[149]
        Move '$14b63' to sArrayAsYear[150]     //Year 2050

        Set psArrayAsYear to sArrayAsYear
    End_Procedure

    { Visibility = Private }
    { Description = "Sets the pISO_Codes struct array property" }
    Procedure CollectISOCodes
        tISO_Codes[] ISO_CodesArray
        String[] asCodes
        String sCodes sCRLF sVal
        Integer iPos iSize iCount iItem
        
        Move (Character(13) + Character(10)) to sCRLF
        Move """
        AD;Andorra;20;AND
        AE;United Arab Emirates;784;ARE
        AF;Afghanistan;4;AFG
        AG;Antigua and Barbuda;28;ATG
        AI;Anguilla;660;AIA
        AL;Albania;8;ALB
        AM;Armenia;51;ARM
        AO;Angola;24;AGO
        AR;Argentina;32;ARG
        as;American Samoa;16;ASM
        AT;Austria;40;AUT
        AU;Australia;36;AUS
        AW;Aruba;533;ABW
        AX;Aaland Islands;248;ALA
        AZ;Azerbaijan;31;AZE
        BA;Bosnia and Herzegovina;70;BIH
        BB;Barbados;52;BRB
        BD;Bangladesh;50;BGD
        BE;Belgium;56;BEL
        BF;Burkina Faso;854;BFA
        BG;Bulgaria;100;BGR
        BH;Bahrain;48;BHR
        BI;Burundi;108;BDI
        BJ;Benin;204;BEN
        BL;Saint Barthélemy;652;BLM
        BM;Bermuda;60;BMU
        BN;Brunei Darussalam;96;BRN
        BO;Boliva, Plurinational State of;68;BOL
        BR;Brazil;76;BRA
        BS;Bahamas;44;BHS
        BT;Bhutan;64;BTN
        BW;Botswana;72;BWA
        by;Belarus;112;BLR
        BZ;Belize;84;BLZ
        CA;Canada;124;CAN
        CC;Cocos (Keeling) Islands;166;CCK
        CD;Congo, The Democratic Republic of;180;COD
        CF;Central African Republic;140;CAF
        CG;Congo;178;COG
        CH;Switzerland;756;CHE
        CI;Côte d'Ivoire;384;CIV
        CK;Cook Islands;184;COK
        CL;Chile;152;CHL
        CM;Cameroon;120;CMR
        CN;China;156;CHN
        CO;Colombia;170;COL
        CR;Costa Rica;188;CRI
        CU;Cuba;192;CUB
        CV;Cap Verde;132;CPV
        CW;Curacao;530;CUW
        CX;Christmas Island;162;CXR
        CY;Cyprus;196;CYP
        CZ;Czeck Republic;203;CZE
        DE;Germany;276;DEU
        DJ;Djibouti;262;DJI
        DK;Denmark;208;DNK
        DM;Dominica;212;DMA
        DO;Dominican Republic;214;DOM
        DZ;Algeria;12;DZA
        EC;Ecuador;218;ECU
        EE;Estonia;233;EST
        EG;Egypt;818;EGY
        EH;Western Sahara;732;ESH
        ER;Eritrea;232;ERI
        ES;Spain;724;ESP
        ET;Ethiopia;231;ETH
        FI;Finland;246;FIN
        FJ;Fiji;242;FJI
        FK;Falklands Islands (Malvinas);238;FLK
        FM;Micronesia, Federated States of;583;FSM
        FO;Faroe Islands;234;FRO
        FR;France;250;FRA
        GA;Gabon;266;GAB
        GB;United Kingdom;826;GBR
        GD;Grenada;308;GRD
        GE;Georgia;268;GEO
        GF;French Guyana;254;GUF
        GG;Guernsey;831;GGY
        GH;Ghana;288;GHA
        GI;Gibraltar;292;GIB
        GM;Gambia;270;GMB
        GN;Guinea;324;GIN
        GP;Guadeloupe;312;GLP
        GQ;Equatorial Guinea;226;GNQ
        GR;Greece;300;GRC
        GS;South Georgia and the South Sandwich Isl;239;SGS
        GT;Guatemala;320;GTM
        GU;Guam;316;GUM
        GW;Guinea-Bissau;624;GNB
        GY;Guyana;328;GUY
        HK;Hong Kong;344;HKG
        HM;Heard Islands and McDonald Islands;334;HMD
        HN;Honduras;340;HND
        HR;Croatia;191;HRV
        HT;Haiti;332;HTI
        HU;Hungary;348;HUN
        ID;Indonesia;360;IDN
        IE;Ireland;372;IRL
        IL;Israel;376;ISR
        IM;Isle Of Man;833;IMN
        IN;India;356;IND
        IQ;Iraq;368;IRQ
        IR;Iran, Islamic Republic of;364;IRN
        IS;Iceland;352;ISL
        IT;Italy;380;ITA
        JE;Jersey;832;JEY
        JM;Jamaica;388;JAM
        JO;Jordan;400;JOR
        JP;Japan;392;JPN
        KE;Kenya;404;KEN
        KG;Kyrgyzstan;417;KGZ
        KH;Cambodia;116;KHM
        KI;Kiribati;296;KIR
        KM;Comoros;174;COM
        KN;Saint Kitts and Nevis;659;KNA
        KP;Korea, Democratic Republic (North Korea);408;PRK
        KR;Korea, Republic Of (South Korea);410;KOR
        KW;Kuwait;414;KWT
        KY;Cayman Islands;136;CYM
        KZ;Kazakhstan;398;KAZ
        LA;Lao People's Democratic Republic (Laos);418;LAO
        LB;Lebanon;422;LBN
        LC;Saint Lucia;662;LCA
        LI;Liechtenstein;438;LIE
        LK;Sri Lanka;144;LKA
        LR;Liberia;430;LBR
        LS;Lesotho;426;LSO
        LT;Lithuania;440;LTU
        LU;Luxembourg;442;LUX
        LV;Latvia;428;LVA
        LY;Libyan Arab Jamahiriya;434;LBY
        MA;Morocco;504;MAR
        MC;Monaco;492;MCO
        MD;Moldova, Republic of;498;MDA
        ME;Montenegro;499;MNE
        MF;Saint Martin;663;MAF
        MG;Madagaskar;450;MDG
        MH;Marshall Islands;584;MHL
        MK;Macedonia, The Former Yugoslav Republic;807;MKD
        ML;Mali;466;MLI
        MM;Myanmar (Burma);104;MMR
        MN;Mongolia;496;MNG
        MO;Macau;446;MAC
        MP;Northern Mariana Islands;580;MNP
        MQ;Martinique;474;MTQ
        MR;Mauritania;478;MRT
        MS;Montserrat;500;MSR
        MT;Malta;470;MLT
        MU;Mauritius;480;MUS
        MV;Maldives;462;MDV
        MW;Malawi;454;MWI
        MX;Mexico;484;MEX
        MY;Malaysia;458;MYS
        MZ;Mozambique;508;MOZ
        NA;Namibia;516;NAM
        NC;New Caledonia;540;NCL
        NE;Niger;562;NER
        NF;Norfolk Islands;574;NFK
        NG;Nigeria;566;NGA
        NI;Nicaragua;558;NIC
        NL;Netherlands;528;NLD
        NO;Norway;578;NOR
        NP;Nepal;524;NPL
        NR;Nauru;520;NRU
        NU;Niue;570;NIU
        NZ;New Zealand;554;NZL
        OM;Oman;512;OMN
        PA;Panama;591;PAN
        PE;Peru;604;PER
        PF;French Polynesia;258;PYF
        PG;Papua New Guinea;598;PNG
        PH;Philippines;608;PHL
        PK;Pakistan;586;PAK
        PL;Poland;616;POL
        PM;Saint Pierre and Miquolon;666;SPM
        PN;Pitcairn;612;PCN
        PR;Puerto Rico;630;PRI
        PS;Palestinian Territory, Occupied;0;
        PT;Portugal;620;PRT
        PW;Palau;585;PLW
        PY;Paraguay;600;PRY
        QA;Qatar;634;QAT
        RE;Réunion;638;REU
        RO;Romania;642;ROM
        RS;Serbia;688;SRB
        RU;Russian Federation;643;RUS
        RW;Rwanda;646;RWA
        SA;Saudi Arabia;682;SAU
        SB;Solomon Islands;90;SLB
        SC;Seychelles;690;SYC
        SD;Sudan;736;SDN
        SE;Sweden;752;SWE
        SG;Singapore;702;SGP
        SH;Saint Helena;654;SHN
        SI;Slovenia;705;SVN
        SJ;Svalbard and Jan Mayen;744;SJM
        SK;Slovakia;703;SVK
        SL;Sierra Leone;694;SLE
        SM;San Marino;674;SMR
        SN;Senegal;686;SEN
        SO;Somalia;706;SOM
        SR;Suriname;740;SUR
        ST;Sao Tomé and Principe;678;STP
        SV;El Salvador;222;SLV
        SY;Syrian Arablic Republic;760;SYR
        SZ;Swaziland;748;SWZ
        TC;Turks and Caicos Islands;796;TCA
        TD;Chad;148;TCD
        TF;French Southerns Territories;260;ATF
        TG;Togo;768;TGO
        TH;Thailand;764;THA
        TJ;Tajikistan;762;TJK
        TK;Tokelau;772;TKL
        TL;Timor-Leste;626;TLS
        TM;Turkmenistan;795;TKM
        TN;Tunisia;788;TUN
        to;Tonga;776;TON
        TR;Turkey;792;TUR
        TT;Trinidad and Tobago;780;TTO
        TV;Tuvalu;798;TUV
        TW;Taiwan, Province of China;158;TWN
        TZ;Tanzania;834;TZA
        UA;Ukraine;804;UKR
        UG;Uganda;800;UGA
        UM;United States Minor Outlying Islands;581;UMI
        US;United States of America;840;USA
        UY;Uruguay;858;URY
        UZ;Uzbekistan;860;UZB
        VA;Holy See (Vativan City State);336;VAT
        VC;Saint Vincent and Grenadines;670;VCT
        VE;Venezuela, Bolivarian Republic of;862;VEN
        VG;Virgin Islands, Britiish;92;VGB
        VI;Virgin Islands, U.S.;850;VIR
        VN;Vietnam;704;VNM
        VU;Vanuatu;548;VUT
        WF;Wallis and Futuna;876;WLF
        WS;Samoa;882;WSM
        YE;Yemen;887;YEM
        YT;Mayotte;175;MYT
        ZA;South Africa;710;ZAF
        ZM;Zambia;894;ZMB
        ZW;Zimbabwe;716;ZWE
        """ to sCodes        

        Move (StrSplitToArray(sCodes, sCRLF)) to asCodes

        Move 0 to iItem
        Move (SizeOfArray(asCodes)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Move asCodes[iCount] to sVal

            Move (Pos(";", sVal)) to iPos
            Move (Left(sVal, iPos -1)) to ISO_CodesArray[iItem].sIso_Short
            Move (Mid(sVal, Length(sVal), iPos +1)) to sVal

            Move (Pos(";", sVal)) to iPos
            Move (Left(sVal, iPos -1)) to ISO_CodesArray[iItem].sOffical_Short
            Move (Mid(sVal, Length(sVal), iPos +1)) to sVal

            Move (Pos(";", sVal)) to iPos
            Move (Left(sVal, iPos -1)) to ISO_CodesArray[iItem].iISO_Code
            Move (Mid(sVal, Length(sVal), iPos +1)) to sVal

            Move sVal to ISO_CodesArray[iItem].sISO_Long
            Increment iItem
        Loop

        Set pISO_Codes to ISO_CodesArray
    End_Procedure

End_Class
